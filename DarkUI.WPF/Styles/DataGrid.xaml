<ResourceDictionary
	x:Class="DarkUI.WPF.Styles.DataGrid"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:local="clr-namespace:DarkUI.WPF">

	<BooleanToVisibilityConverter x:Key="BoolToVisibilityConverter" />

	<!--  Style and template for the DataGrid.  -->
	<Style TargetType="{x:Type DataGrid}">
		<Setter Property="AlternationCount" Value="2" />
		<Setter Property="Background" Value="{DynamicResource Default_Background}" />
		<Setter Property="BorderBrush" Value="{DynamicResource InputControl_Border}" />
		<Setter Property="BorderThickness" Value="{x:Static local:Defaults.Thickness_Border}" />
		<Setter Property="CanUserReorderColumns" Value="False" />
		<Setter Property="FontSize" Value="{x:Static local:Defaults.FontSize}" />
		<Setter Property="Foreground" Value="{DynamicResource Default_Text}" />
		<Setter Property="HorizontalGridLinesBrush" Value="{DynamicResource Default_Border_HighContrast}" />
		<Setter Property="RowDetailsVisibilityMode" Value="VisibleWhenSelected" />
		<Setter Property="ScrollViewer.CanContentScroll" Value="True" />
		<Setter Property="ScrollViewer.PanningMode" Value="Both" />
		<Setter Property="SnapsToDevicePixels" Value="{x:Static local:Defaults.SnapsToDevicePixels}" />
		<Setter Property="UseLayoutRounding" Value="{x:Static local:Defaults.UseLayoutRounding}" />
		<Setter Property="VerticalGridLinesBrush" Value="{DynamicResource Default_Border_HighContrast}" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type DataGrid}">
					<Border
						x:Name="Border"
						Padding="{TemplateBinding Padding}"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
						UseLayoutRounding="{TemplateBinding UseLayoutRounding}">
						<ScrollViewer x:Name="DG_ScrollViewer" Focusable="False">
							<ScrollViewer.Template>
								<ControlTemplate TargetType="{x:Type ScrollViewer}">
									<Grid>
										<Grid.ColumnDefinitions>
											<ColumnDefinition />
											<ColumnDefinition Width="Auto" />
										</Grid.ColumnDefinitions>
										<Grid.RowDefinitions>
											<RowDefinition Height="Auto" />
											<RowDefinition />
											<RowDefinition Height="Auto" />
										</Grid.RowDefinitions>

										<DataGridColumnHeadersPresenter x:Name="PART_ColumnHeadersPresenter" Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Column}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />

										<ScrollContentPresenter
											x:Name="PART_ScrollContentPresenter"
											Grid.Row="1"
											CanContentScroll="{TemplateBinding CanContentScroll}" />

										<ScrollBar
											x:Name="PART_VerticalScrollBar"
											Grid.Row="0"
											Grid.RowSpan="2"
											Grid.Column="1"
											Maximum="{TemplateBinding ScrollableHeight}"
											Orientation="Vertical"
											ViewportSize="{TemplateBinding ViewportHeight}"
											Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
											Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />

										<Grid Grid.Row="2">
											<Grid.ColumnDefinitions>
												<ColumnDefinition Width="{Binding NonFrozenColumnsViewportHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
												<ColumnDefinition />
											</Grid.ColumnDefinitions>

											<ScrollBar
												x:Name="PART_HorizontalScrollBar"
												Grid.Column="1"
												Maximum="{TemplateBinding ScrollableWidth}"
												Orientation="Horizontal"
												ViewportSize="{TemplateBinding ViewportWidth}"
												Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
												Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
										</Grid>
									</Grid>
								</ControlTemplate>
							</ScrollViewer.Template>

							<ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						</ScrollViewer>

						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Disabled">
									<Storyboard>
										<ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
											<EasingColorKeyFrame KeyTime="0" Value="{DynamicResource DarkGreySelectionColor}" />
										</ColorAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Normal" />
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>

		<Style.Triggers>
			<Trigger Property="IsGrouping" Value="True">
				<Setter Property="ScrollViewer.CanContentScroll" Value="False" />
			</Trigger>
		</Style.Triggers>
	</Style>

	<Style x:Key="EditableDataGridCell" TargetType="{x:Type TextBox}">
		<Setter Property="Background" Value="{DynamicResource Default_Backdrop}" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="CaretBrush" Value="{DynamicResource Default_Text}" />
		<Setter Property="Foreground" Value="{DynamicResource Default_Text}" />
		<Setter Property="Padding" Value="0,2" />

		<EventSetter Event="Loaded" Handler="TextBox_Loaded" />
	</Style>

	<!--  Style and template for the DataGridCell.  -->
	<Style TargetType="{x:Type DataGridCell}">
		<Setter Property="Foreground" Value="{DynamicResource Default_Text}" />
		<Setter Property="SnapsToDevicePixels" Value="{x:Static local:Defaults.SnapsToDevicePixels}" />
		<Setter Property="UseLayoutRounding" Value="{x:Static local:Defaults.UseLayoutRounding}" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type DataGridCell}">
					<Border
						x:Name="Border"
						Padding="2,4"
						Background="Transparent"
						BorderBrush="Transparent"
						SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
						UseLayoutRounding="{TemplateBinding UseLayoutRounding}">
						<ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />

						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="FocusStates">
								<VisualState x:Name="Unfocused" />
								<VisualState x:Name="Focused" />
							</VisualStateGroup>
							<VisualStateGroup x:Name="CurrentStates">
								<VisualState x:Name="Regular" />
								<VisualState x:Name="Current">
									<Storyboard>
										<ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
											<EasingColorKeyFrame KeyTime="0" Value="{DynamicResource BlueSelectionColor}" />
										</ColorAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>

		<Style.Triggers>
			<Trigger Property="IsEditing" Value="True">
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type DataGridCell}">
							<Border Padding="2">
								<TextBox
									FocusManager.FocusedElement="{Binding RelativeSource={RelativeSource Self}}"
									Style="{StaticResource EditableDataGridCell}"
									Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content.Text, Mode=TwoWay, UpdateSourceTrigger=Default}" />
							</Border>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Trigger>
		</Style.Triggers>
	</Style>

	<!--  Style and template for the DataGridRow.  -->
	<Style TargetType="{x:Type DataGridRow}">
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="Foreground" Value="{DynamicResource Default_Text}" />
		<Setter Property="SnapsToDevicePixels" Value="{x:Static local:Defaults.SnapsToDevicePixels}" />
		<Setter Property="UseLayoutRounding" Value="{x:Static local:Defaults.UseLayoutRounding}" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type DataGridRow}">
					<Border
						x:Name="DGR_Border"
						Background="Transparent"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
						UseLayoutRounding="{TemplateBinding UseLayoutRounding}">
						<SelectiveScrollingGrid>
							<SelectiveScrollingGrid.RowDefinitions>
								<RowDefinition />
								<RowDefinition Height="Auto" />
							</SelectiveScrollingGrid.RowDefinitions>

							<DataGridCellsPresenter
								Grid.Column="1"
								ItemsPanel="{TemplateBinding ItemsPanel}"
								SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							<DataGridDetailsPresenter
								Grid.Row="1"
								Grid.Column="1"
								SelectiveScrollingGrid.SelectiveScrollingOrientation="{Binding AreRowDetailsFrozen, ConverterParameter={x:Static SelectiveScrollingOrientation.Vertical}, Converter={x:Static DataGrid.RowDetailsScrollingConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"
								Visibility="{TemplateBinding DetailsVisibility}" />
						</SelectiveScrollingGrid>

						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal" />

								<VisualState x:Name="Normal_AlternatingRow">
									<Storyboard>
										<ColorAnimationUsingKeyFrames Storyboard.TargetName="DGR_Border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
											<EasingColorKeyFrame KeyTime="0" Value="{DynamicResource HeaderBackgroundColor}" />
										</ColorAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>

								<VisualState x:Name="Normal_Selected">
									<Storyboard>
										<ColorAnimationUsingKeyFrames Storyboard.TargetName="DGR_Border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
											<EasingColorKeyFrame KeyTime="0" Value="{DynamicResource BlueSelectionColor}" />
										</ColorAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>

								<VisualState x:Name="Normal_Editing">
									<Storyboard>
										<ColorAnimationUsingKeyFrames Storyboard.TargetName="DGR_Border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
											<EasingColorKeyFrame KeyTime="0" Value="{DynamicResource GreySelectionColor}" />
										</ColorAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>

								<VisualState x:Name="Unfocused_Selected">
									<Storyboard>
										<ColorAnimationUsingKeyFrames Storyboard.TargetName="DGR_Border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
											<EasingColorKeyFrame KeyTime="0" Value="{DynamicResource GreySelectionColor}" />
										</ColorAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>

								<VisualState x:Name="MouseOver_Selected">
									<Storyboard>
										<ColorAnimationUsingKeyFrames Storyboard.TargetName="DGR_Border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
											<EasingColorKeyFrame KeyTime="0" Value="{DynamicResource BlueSelectionColor}" />
										</ColorAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>

								<VisualState x:Name="MouseOver_Unfocused_Selected">
									<Storyboard>
										<ColorAnimationUsingKeyFrames Storyboard.TargetName="DGR_Border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
											<EasingColorKeyFrame KeyTime="0" Value="{DynamicResource GreySelectionColor}" />
										</ColorAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--  Style and template for the resize control on the DataGridColumnHeader.  -->
	<Style x:Key="ColumnHeaderGripperStyle" TargetType="{x:Type Thumb}">
		<Setter Property="Width" Value="8" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="Cursor" Value="SizeWE" />
		<Setter Property="SnapsToDevicePixels" Value="{x:Static local:Defaults.SnapsToDevicePixels}" />
		<Setter Property="UseLayoutRounding" Value="{x:Static local:Defaults.UseLayoutRounding}" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Thumb}">
					<Border
						Padding="{TemplateBinding Padding}"
						Background="{TemplateBinding Background}"
						SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
						UseLayoutRounding="{TemplateBinding UseLayoutRounding}" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--  Style and template for the DataGridColumnHeader.  -->
	<Style TargetType="{x:Type DataGridColumnHeader}">
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="SnapsToDevicePixels" Value="{x:Static local:Defaults.SnapsToDevicePixels}" />
		<Setter Property="UseLayoutRounding" Value="{x:Static local:Defaults.UseLayoutRounding}" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
					<Grid SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" UseLayoutRounding="{TemplateBinding UseLayoutRounding}">
						<Border
							x:Name="ColumnHeaderBorder"
							Padding="4,0"
							Background="{DynamicResource MediumBackground}"
							BorderThickness="1">
							<ContentPresenter
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						</Border>

						<Thumb
							x:Name="PART_LeftHeaderGripper"
							HorizontalAlignment="Left"
							Style="{StaticResource ColumnHeaderGripperStyle}" />
						<Thumb
							x:Name="PART_RightHeaderGripper"
							HorizontalAlignment="Right"
							Style="{StaticResource ColumnHeaderGripperStyle}" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--  Style and template for the DataGridColumnHeadersPresenter.  -->
	<Style TargetType="{x:Type DataGridColumnHeadersPresenter}">
		<Setter Property="SnapsToDevicePixels" Value="{x:Static local:Defaults.SnapsToDevicePixels}" />
		<Setter Property="UseLayoutRounding" Value="{x:Static local:Defaults.UseLayoutRounding}" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type DataGridColumnHeadersPresenter}">
					<Grid SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" UseLayoutRounding="{TemplateBinding UseLayoutRounding}">
						<DataGridColumnHeader x:Name="PART_FillerColumnHeader" IsHitTestVisible="False" />
						<ItemsPresenter />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
</ResourceDictionary>
