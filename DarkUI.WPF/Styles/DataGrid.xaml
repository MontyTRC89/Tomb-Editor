<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
	<BooleanToVisibilityConverter x:Key="BoolToVisibilityConverter" />

	<!--  Style and template for the button in the upper left corner of the DataGrid.  -->
	<Style x:Key="{ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle, TypeInTargetAssembly={x:Type DataGrid}}" TargetType="{x:Type Button}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid>
						<Rectangle
							x:Name="Border"
							Fill="{DynamicResource InputControl_Background}"
							SnapsToDevicePixels="True"
							Stroke="{DynamicResource InputControl_Border}" />
						<Polygon
							x:Name="Arrow"
							Margin="8,8,3,3"
							HorizontalAlignment="Right"
							VerticalAlignment="Bottom"
							Fill="{DynamicResource InputControl_Glyph}"
							Opacity="0.15"
							Points="0,10 10,10 10,0"
							Stretch="Uniform" />

						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal" />
								<VisualState x:Name="MouseOver">
									<Storyboard>
										<ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Shape.Stroke).(SolidColorBrush.Color)">
											<EasingColorKeyFrame KeyTime="0" Value="{DynamicResource GreySelectionColor}" />
										</ColorAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Pressed">
									<Storyboard>
										<ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)">
											<EasingColorKeyFrame KeyTime="0" Value="{DynamicResource DarkBackgroundColor}" />
										</ColorAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Disabled">
									<Storyboard>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetName="Arrow" Storyboard.TargetProperty="(UIElement.Visibility)">
											<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}" />
										</ObjectAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--  Style and template for the DataGrid.  -->
	<Style TargetType="{x:Type DataGrid}">
		<Setter Property="AlternationCount" Value="2" />
		<Setter Property="Background" Value="{DynamicResource Default_Background}" />
		<Setter Property="BorderBrush" Value="{DynamicResource InputControl_Border}" />
		<Setter Property="BorderThickness" Value="{DynamicResource Default_BorderThickness}" />
		<Setter Property="FontSize" Value="11" />
		<Setter Property="Foreground" Value="{DynamicResource Default_Text}" />
		<Setter Property="HorizontalGridLinesBrush" Value="{DynamicResource Default_Border_HighContrast}" />
		<Setter Property="RowDetailsVisibilityMode" Value="VisibleWhenSelected" />
		<Setter Property="ScrollViewer.CanContentScroll" Value="True" />
		<Setter Property="ScrollViewer.PanningMode" Value="Both" />
		<Setter Property="Stylus.IsFlicksEnabled" Value="False" />
		<Setter Property="VerticalGridLinesBrush" Value="{DynamicResource Default_Border_HighContrast}" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type DataGrid}">
					<Border
						x:Name="Border"
						Padding="{TemplateBinding Padding}"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						SnapsToDevicePixels="True">
						<ScrollViewer
							x:Name="DG_ScrollViewer"
							Background="Black"
							Focusable="False">
							<ScrollViewer.Template>
								<ControlTemplate TargetType="{x:Type ScrollViewer}">
									<Grid>
										<Grid.ColumnDefinitions>
											<ColumnDefinition />
											<ColumnDefinition Width="Auto" />
										</Grid.ColumnDefinitions>
										<Grid.RowDefinitions>
											<RowDefinition Height="Auto" />
											<RowDefinition />
											<RowDefinition Height="Auto" />
										</Grid.RowDefinitions>

										<DataGridColumnHeadersPresenter x:Name="PART_ColumnHeadersPresenter" Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Column}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />

										<ScrollContentPresenter
											x:Name="PART_ScrollContentPresenter"
											Grid.Row="1"
											CanContentScroll="{TemplateBinding CanContentScroll}" />

										<ScrollBar
											x:Name="PART_VerticalScrollBar"
											Grid.Row="0"
											Grid.RowSpan="2"
											Grid.Column="1"
											Maximum="{TemplateBinding ScrollableHeight}"
											Orientation="Vertical"
											ViewportSize="{TemplateBinding ViewportHeight}"
											Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
											Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />

										<Grid Grid.Row="2">
											<Grid.ColumnDefinitions>
												<ColumnDefinition Width="{Binding NonFrozenColumnsViewportHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
												<ColumnDefinition />
											</Grid.ColumnDefinitions>

											<ScrollBar
												x:Name="PART_HorizontalScrollBar"
												Grid.Column="1"
												Maximum="{TemplateBinding ScrollableWidth}"
												Orientation="Horizontal"
												ViewportSize="{TemplateBinding ViewportWidth}"
												Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
												Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
										</Grid>
									</Grid>
								</ControlTemplate>
							</ScrollViewer.Template>

							<ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						</ScrollViewer>

						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Disabled">
									<Storyboard>
										<ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
											<EasingColorKeyFrame KeyTime="0" Value="{DynamicResource DarkGreySelectionColor}" />
										</ColorAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Normal" />
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>

		<Style.Triggers>
			<Trigger Property="IsGrouping" Value="True">
				<Setter Property="ScrollViewer.CanContentScroll" Value="False" />
			</Trigger>
		</Style.Triggers>
	</Style>

	<!--  Style and template for the DataGridCell.  -->
	<Style TargetType="{x:Type DataGridCell}">
		<Setter Property="Foreground" Value="{DynamicResource Default_Text}" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type DataGridCell}">
					<Border
						x:Name="Border"
						Padding="2,4"
						Background="Transparent"
						BorderBrush="Transparent"
						SnapsToDevicePixels="True"
						UseLayoutRounding="True">
						<ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />

						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="FocusStates">
								<VisualState x:Name="Unfocused" />
								<VisualState x:Name="Focused" />
							</VisualStateGroup>
							<VisualStateGroup x:Name="CurrentStates">
								<VisualState x:Name="Regular" />
								<VisualState x:Name="Current">
									<Storyboard>
										<ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
											<EasingColorKeyFrame KeyTime="0" Value="{DynamicResource BlueSelectionColor}" />
										</ColorAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--  Style and template for the DataGridRow.  -->
	<Style TargetType="{x:Type DataGridRow}">
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="Foreground" Value="{DynamicResource Default_Text}" />
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
		<Setter Property="ValidationErrorTemplate">
			<Setter.Value>
				<ControlTemplate>
					<TextBlock
						Margin="2,0,0,0"
						VerticalAlignment="Center"
						Foreground="Red"
						Text="!" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type DataGridRow}">
					<Border
						x:Name="DGR_Border"
						Background="Transparent"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						SnapsToDevicePixels="True">
						<SelectiveScrollingGrid>
							<SelectiveScrollingGrid.RowDefinitions>
								<RowDefinition />
								<RowDefinition Height="Auto" />
							</SelectiveScrollingGrid.RowDefinitions>

							<DataGridCellsPresenter
								Grid.Column="1"
								ItemsPanel="{TemplateBinding ItemsPanel}"
								SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							<DataGridDetailsPresenter
								Grid.Row="1"
								Grid.Column="1"
								SelectiveScrollingGrid.SelectiveScrollingOrientation="{Binding AreRowDetailsFrozen, ConverterParameter={x:Static SelectiveScrollingOrientation.Vertical}, Converter={x:Static DataGrid.RowDetailsScrollingConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"
								Visibility="{TemplateBinding DetailsVisibility}" />
						</SelectiveScrollingGrid>

						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal" />

								<!--  Provide a different appearance for every other row.  -->
								<VisualState x:Name="Normal_AlternatingRow">
									<Storyboard>
										<ColorAnimationUsingKeyFrames Storyboard.TargetName="DGR_Border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
											<EasingColorKeyFrame KeyTime="0" Value="{DynamicResource HeaderBackgroundColor}" />
										</ColorAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>

								<!--
									In this example, a row in Editing or selected mode has an
									identical appearances. In other words, the states
									Normal_Selected, Unfocused_Selected, Normal_Editing,
									MouseOver_Editing, MouseOver_Unfocused_Editing,
									and Unfocused_Editing are identical.
								-->
								<VisualState x:Name="Normal_Selected">
									<Storyboard>
										<ColorAnimationUsingKeyFrames Storyboard.TargetName="DGR_Border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
											<EasingColorKeyFrame KeyTime="0" Value="{DynamicResource BlueSelectionColor}" />
										</ColorAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>

								<VisualState x:Name="Unfocused_Selected">
									<Storyboard>
										<ColorAnimationUsingKeyFrames Storyboard.TargetName="DGR_Border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
											<EasingColorKeyFrame KeyTime="0" Value="{DynamicResource GreySelectionColor}" />
										</ColorAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>

								<VisualState x:Name="Normal_Editing">
									<Storyboard>
										<ColorAnimationUsingKeyFrames Storyboard.TargetName="DGR_Border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
											<EasingColorKeyFrame KeyTime="0" Value="{DynamicResource GreyBackgroundColor}" />
										</ColorAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>

								<VisualState x:Name="MouseOver_Editing">
									<Storyboard>
										<ColorAnimationUsingKeyFrames Storyboard.TargetName="DGR_Border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
											<EasingColorKeyFrame KeyTime="0" Value="{DynamicResource GreyBackgroundColor}" />
										</ColorAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>

								<VisualState x:Name="MouseOver_Unfocused_Editing">
									<Storyboard>
										<ColorAnimationUsingKeyFrames Storyboard.TargetName="DGR_Border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
											<EasingColorKeyFrame KeyTime="0" Value="{DynamicResource GreyBackgroundColor}" />
										</ColorAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>

								<VisualState x:Name="Unfocused_Editing">
									<Storyboard>
										<ColorAnimationUsingKeyFrames Storyboard.TargetName="DGR_Border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
											<EasingColorKeyFrame KeyTime="0" Value="{DynamicResource GreyBackgroundColor}" />
										</ColorAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>

								<VisualState x:Name="MouseOver">
									<Storyboard>
										<ColorAnimationUsingKeyFrames Storyboard.TargetName="DGR_Border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
											<EasingColorKeyFrame KeyTime="0" Value="{DynamicResource GreyBackgroundColor}" />
										</ColorAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>

								<!--
									In this example, the appearance of a selected row
									that has the mouse over it is the same regardless of
									whether the row is selected.  In other words, the states
									MouseOver_Editing and MouseOver_Unfocused_Editing are identical.
								-->
								<VisualState x:Name="MouseOver_Selected">
									<Storyboard>
										<ColorAnimationUsingKeyFrames Storyboard.TargetName="DGR_Border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
											<EasingColorKeyFrame KeyTime="0" Value="{DynamicResource BlueSelectionColor}" />
										</ColorAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>

								<VisualState x:Name="MouseOver_Unfocused_Selected">
									<Storyboard>
										<ColorAnimationUsingKeyFrames Storyboard.TargetName="DGR_Border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
											<EasingColorKeyFrame KeyTime="0" Value="{DynamicResource BlueSelectionColor}" />
										</ColorAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--  Style and template for the resize control on the DataGridRowHeader.  -->
	<Style x:Key="RowHeaderGripperStyle" TargetType="{x:Type Thumb}">
		<Setter Property="Height" Value="8" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="Cursor" Value="SizeNS" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Thumb}">
					<Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--  Style and template for the DataGridRowHeader.  -->
	<Style TargetType="{x:Type DataGridRowHeader}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type DataGridRowHeader}">
					<Grid>
						<Border
							x:Name="rowHeaderBorder"
							Width="10"
							BorderThickness="1">
							<Border.BorderBrush>
								<LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
									<GradientStop Offset="0" Color="{DynamicResource BorderLightColor}" />
									<GradientStop Offset="1" Color="{DynamicResource BorderDarkColor}" />
								</LinearGradientBrush>
							</Border.BorderBrush>
							<Border.Background>
								<LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
									<GradientStop Offset="0" Color="{DynamicResource ControlLightColor}" />
									<GradientStop Offset="1" Color="{DynamicResource ControlMediumColor}" />
								</LinearGradientBrush>
							</Border.Background>
							<StackPanel Orientation="Horizontal">
								<ContentPresenter VerticalAlignment="Center" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
								<Control
									SnapsToDevicePixels="False"
									Template="{Binding ValidationErrorTemplate, RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}}"
									Visibility="{Binding (Validation.HasError), Converter={StaticResource BoolToVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}}" />
							</StackPanel>
						</Border>

						<Thumb
							x:Name="PART_TopHeaderGripper"
							VerticalAlignment="Top"
							Style="{StaticResource RowHeaderGripperStyle}" />
						<Thumb
							x:Name="PART_BottomHeaderGripper"
							VerticalAlignment="Bottom"
							Style="{StaticResource RowHeaderGripperStyle}" />
						<VisualStateManager.VisualStateGroups>
							<!--
								This example does not specify an appearance for every
								state.  You can add storyboard to the states that are listed
								to change the appearance of the DataGridRowHeader when it is
								in a specific state.
							-->
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal" />
								<VisualState x:Name="Normal_CurrentRow" />
								<VisualState x:Name="Unfocused_EditingRow" />
								<VisualState x:Name="Normal_EditingRow" />
								<VisualState x:Name="MouseOver">
									<Storyboard>
										<ColorAnimationUsingKeyFrames Storyboard.TargetName="rowHeaderBorder" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
											<EasingColorKeyFrame KeyTime="0" Value="{DynamicResource BlueSelectionColor}" />
										</ColorAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="MouseOver_CurrentRow" />
								<VisualState x:Name="MouseOver_Unfocused_EditingRow" />
								<VisualState x:Name="MouseOver_EditingRow" />
								<VisualState x:Name="MouseOver_Unfocused_Selected" />
								<VisualState x:Name="MouseOver_Selected" />
								<VisualState x:Name="MouseOver_Unfocused_CurrentRow_Selected" />
								<VisualState x:Name="MouseOver_CurrentRow_Selected" />
								<VisualState x:Name="Unfocused_Selected" />
								<VisualState x:Name="Unfocused_CurrentRow_Selected" />
								<VisualState x:Name="Normal_CurrentRow_Selected" />
								<VisualState x:Name="Normal_Selected" />
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--  Style and template for the resize control on the DataGridColumnHeader.  -->
	<Style x:Key="ColumnHeaderGripperStyle" TargetType="{x:Type Thumb}">
		<Setter Property="Width" Value="8" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="Cursor" Value="SizeWE" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Thumb}">
					<Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--  Style and template for the DataGridColumnHeader.  -->
	<Style TargetType="{x:Type DataGridColumnHeader}">
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
					<Grid>
						<Border
							x:Name="columnHeaderBorder"
							Padding="4,0"
							Background="{DynamicResource MediumBackground}"
							BorderThickness="1"
							UseLayoutRounding="True">
							<ContentPresenter
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						</Border>

						<Thumb
							x:Name="PART_LeftHeaderGripper"
							HorizontalAlignment="Left"
							Style="{StaticResource ColumnHeaderGripperStyle}" />
						<Thumb
							x:Name="PART_RightHeaderGripper"
							HorizontalAlignment="Right"
							Style="{StaticResource ColumnHeaderGripperStyle}" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="Background">
			<Setter.Value>
				<LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
					<GradientStop Offset="0" Color="{DynamicResource ControlLightColor}" />
					<GradientStop Offset="1" Color="{DynamicResource ControlMediumColor}" />
				</LinearGradientBrush>
			</Setter.Value>
		</Setter>
	</Style>

	<!--  Style and template for the DataGridColumnHeadersPresenter.  -->
	<Style TargetType="{x:Type DataGridColumnHeadersPresenter}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type DataGridColumnHeadersPresenter}">
					<Grid>
						<DataGridColumnHeader x:Name="PART_FillerColumnHeader" IsHitTestVisible="False" />
						<ItemsPresenter />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
</ResourceDictionary>
