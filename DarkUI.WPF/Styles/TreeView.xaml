<ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:controls="clr-namespace:DarkUI.WPF.CustomControls"
	xmlns:converters="clr-namespace:DarkUI.WPF.Converters"
	xmlns:local="clr-namespace:DarkUI.WPF">

	<converters:IndentToMarginConverter x:Key="IndentToMarginConverter" />

	<Style TargetType="{x:Type TreeView}">
		<!--  Control properties  -->
		<Setter Property="AlternationCount" Value="2" />

		<!--  Layout  -->
		<Setter Property="SnapsToDevicePixels" Value="{x:Static local:Defaults.SnapsToDevicePixels}" />
		<Setter Property="UseLayoutRounding" Value="{x:Static local:Defaults.UseLayoutRounding}" />

		<!--  Brushes  -->
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderBrush" Value="{DynamicResource Brush_Border}" />
		<Setter Property="Foreground" Value="{DynamicResource Brush_Text}" />

		<!--  Thicknesses  -->
		<Setter Property="BorderThickness" Value="{x:Static local:Defaults.BorderThickness}" />
		<Setter Property="Padding" Value="0" />

		<!--  ScrollViewer  -->
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
		<Setter Property="ScrollViewer.PanningMode" Value="Both" />
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />

		<!--  Template  -->
		<Setter Property="FocusVisualStyle" Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TreeView}">
					<Border
						x:Name="border"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
						UseLayoutRounding="{TemplateBinding UseLayoutRounding}">
						<!--  CanContentScroll must be False, otherwise scrolling breaks  -->
						<ScrollViewer
							x:Name="scrollViewer"
							Padding="{TemplateBinding Padding}"
							CanContentScroll="False">
							<ItemsPresenter />
						</ScrollViewer>
					</Border>

					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="False">
							<Setter TargetName="border" Property="Background" Value="{DynamicResource Brush_Background_Disabled}" />
						</Trigger>

						<Trigger Property="VirtualizingPanel.IsVirtualizing" Value="True">
							<Setter TargetName="scrollViewer" Property="CanContentScroll" Value="True" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>

		<Style.Triggers>
			<Trigger Property="VirtualizingPanel.IsVirtualizing" Value="True">
				<Setter Property="ItemsPanel">
					<Setter.Value>
						<ItemsPanelTemplate>
							<VirtualizingStackPanel />
						</ItemsPanelTemplate>
					</Setter.Value>
				</Setter>
			</Trigger>
		</Style.Triggers>
	</Style>

	<Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
		<!--  Control properties  -->
		<Setter Property="Focusable" Value="False" />

		<!--  Layout  -->
		<Setter Property="SnapsToDevicePixels" Value="{x:Static local:Defaults.SnapsToDevicePixels}" />
		<Setter Property="UseLayoutRounding" Value="{x:Static local:Defaults.UseLayoutRounding}" />

		<!--  Brushes  -->
		<Setter Property="Background" Value="{DynamicResource Brush_Text}" />
		<Setter Property="BorderBrush" Value="{DynamicResource Brush_Text}" />

		<!--  Template  -->
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border
						Width="{x:Static local:Defaults.Path_MaxIconWidth}"
						Height="{x:Static local:Defaults.Path_MaxIconHeight}"
						Background="Transparent"
						SnapsToDevicePixels="False"
						UseLayoutRounding="False">
						<Path
							x:Name="expandPath"
							Margin="{x:Static local:Defaults.TreeView_ExpanderIconNormalMargin}"
							Data="{DynamicResource TreeArrow}"
							Stretch="Uniform"
							Stroke="{DynamicResource Brush_Text}" />
					</Border>

					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="True">
							<Setter TargetName="expandPath" Property="Data" Value="{DynamicResource TreeArrowChecked}" />
							<Setter TargetName="expandPath" Property="Margin" Value="{x:Static local:Defaults.TreeView_ExpanderIconCheckedMargin}" />
							<Setter TargetName="expandPath" Property="Fill" Value="{DynamicResource Brush_Text}" />
							<Setter TargetName="expandPath" Property="Stroke" Value="{DynamicResource Brush_Text}" />
						</Trigger>

						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="expandPath" Property="Fill" Value="{DynamicResource Brush_Text}" />
							<Setter TargetName="expandPath" Property="Stroke" Value="{DynamicResource Brush_Text}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="{x:Type controls:AlternatingTreeViewItem}">
		<!--  Control properties  -->
		<Setter Property="AlternationCount" Value="{Binding AlternationCount, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />

		<!--  Layout  -->
		<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
		<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
		<Setter Property="SnapsToDevicePixels" Value="{x:Static local:Defaults.SnapsToDevicePixels}" />
		<Setter Property="UseLayoutRounding" Value="{x:Static local:Defaults.UseLayoutRounding}" />

		<!--  Brushes  -->
		<Setter Property="Foreground" Value="{DynamicResource Brush_Text}" />

		<!--  Thicknesses  -->
		<Setter Property="Padding">
			<Setter.Value>
				<Thickness Bottom="{x:Static local:Defaults.TinyThicknessWidth}" Top="{x:Static local:Defaults.TinyThicknessWidth}" />
			</Setter.Value>
		</Setter>

		<!--  Template  -->
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type controls:AlternatingTreeViewItem}">
					<StackPanel>
						<Border
							x:Name="border"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
							UseLayoutRounding="{TemplateBinding UseLayoutRounding}">
							<Grid x:Name="contentRoot">
								<Grid.Style>
									<Style TargetType="{x:Type Grid}">
										<Setter Property="Margin" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource IndentToMarginConverter}}" />
									</Style>
								</Grid.Style>
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="{x:Static local:Defaults.TreeView_Indentation}" />
									<ColumnDefinition />
								</Grid.ColumnDefinitions>

								<ToggleButton
									x:Name="expander"
									ClickMode="Press"
									IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
									Style="{StaticResource ExpandCollapseToggleStyle}" />
								<ContentPresenter
									x:Name="PART_Header"
									Grid.Column="1"
									Margin="{TemplateBinding Padding}"
									HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
									ContentSource="Header"
									SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							</Grid>
						</Border>

						<ItemsPresenter x:Name="ItemsHost" />
					</StackPanel>

					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="False">
							<Setter TargetName="contentRoot" Property="Opacity" Value="{DynamicResource Opacity_DisabledContent}" />
						</Trigger>

						<Trigger Property="ItemsControl.AlternationIndex" Value="1">
							<Setter Property="Background" Value="{DynamicResource Brush_Background_Alternative}" />
						</Trigger>

						<Trigger Property="HasItems" Value="False">
							<Setter TargetName="expander" Property="Visibility" Value="Hidden" />
						</Trigger>

						<Trigger Property="IsExpanded" Value="False">
							<Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed" />
						</Trigger>

						<Trigger Property="IsSelected" Value="True">
							<Setter TargetName="border" Property="Background" Value="{DynamicResource Brush_Selection}" />
							<Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Brush_Selection}" />
						</Trigger>

						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="True" />
								<Condition Property="IsSelectionActive" Value="False" />
							</MultiTrigger.Conditions>
							<Setter TargetName="border" Property="Background" Value="{DynamicResource Brush_Selection_LostFocus}" />
							<Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Brush_Selection_LostFocus}" />
						</MultiTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>

		<Style.Triggers>
			<Trigger Property="VirtualizingPanel.IsVirtualizing" Value="True">
				<Setter Property="ItemsPanel">
					<Setter.Value>
						<ItemsPanelTemplate>
							<VirtualizingStackPanel />
						</ItemsPanelTemplate>
					</Setter.Value>
				</Setter>
			</Trigger>
		</Style.Triggers>
	</Style>
</ResourceDictionary>
