<ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:aero="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2"
	xmlns:chrome="clr-namespace:Xceed.Wpf.Toolkit.Chromes;assembly=Xceed.Wpf.Toolkit.NET5"
	xmlns:conv="clr-namespace:Xceed.Wpf.Toolkit.Core.Converters;assembly=Xceed.Wpf.Toolkit.NET5"
	xmlns:local="clr-namespace:Xceed.Wpf.Toolkit;assembly=Xceed.Wpf.Toolkit.NET5"
	xmlns:sys="clr-namespace:System;assembly=mscorlib"
	xmlns:themes="clr-namespace:Xceed.Wpf.Toolkit.Themes;assembly=Xceed.Wpf.Toolkit.NET5">
	<ResourceDictionary.MergedDictionaries>
		<ResourceDictionary Source="/Xceed.Wpf.Toolkit.NET5;component/Themes/Generic/Glyphs.xaml" />
	</ResourceDictionary.MergedDictionaries>

	<LinearGradientBrush x:Key="PopupDarkBorderBrush" StartPoint="0.5,0" EndPoint="0.5,1">
		<GradientStop Offset="0" Color="#FFA3AEB9" />
		<GradientStop Offset="0.375" Color="#FF8399A9" />
		<GradientStop Offset="0.375" Color="#FF718597" />
		<GradientStop Offset="1" Color="#FF617584" />
	</LinearGradientBrush>

	<LinearGradientBrush x:Key="PopupBackgroundBrush" StartPoint="0,0" EndPoint="0,1">
		<LinearGradientBrush.GradientStops>
			<GradientStopCollection>
				<GradientStop Offset="0" Color="#FFffffff" />
				<GradientStop Offset="1" Color="#FFE8EBED" />
			</GradientStopCollection>
		</LinearGradientBrush.GradientStops>
	</LinearGradientBrush>

	<conv:InverseBoolConverter x:Key="InverseBoolConverter" />

	<BooleanToVisibilityConverter x:Key="VisibleIfTrueConverter" />

	<Style TargetType="{x:Type ToolBarTray}">
		<Setter Property="Background" Value="{DynamicResource GreyBackground}" />
	</Style>

	<Style x:Key="ToolBarVerticalOverflowButtonStyle" TargetType="{x:Type ToggleButton}">
		<Setter Property="Background" Value="{DynamicResource GreyBackground}" />
		<Setter Property="BorderBrush" Value="{DynamicResource LightBorder}" />
		<Setter Property="MinHeight" Value="0" />
		<Setter Property="MinWidth" Value="0" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border
						x:Name="Bd"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						SnapsToDevicePixels="true"
						UseLayoutRounding="True">
						<Canvas
							Width="7"
							Height="6"
							Margin="2,7,2,2"
							HorizontalAlignment="Right"
							VerticalAlignment="Bottom"
							SnapsToDevicePixels="true">
							<Path Data="M 1.5 1 L 1.5 6" Stroke="{DynamicResource ToolBarDropDownBackgroundVert}" />
							<Path Data="M 0.5 0 L 0.5 5" Stroke="{DynamicResource ToolBarDropDownVert}" />
							<Path Data="M 3.5 0.5 L 7 3.5 L 4 6.5 Z" Fill="{DynamicResource LightText}" />
							<Path Data="M 3 -0.5 L 6 2.5 L 3 5.5 Z" Fill="{DynamicResource LightText}" />
						</Canvas>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="Bd" Property="Background" Value="{DynamicResource ToolBarButtonHover}" />
						</Trigger>
						<Trigger Property="IsKeyboardFocused" Value="true">
							<Setter TargetName="Bd" Property="Background" Value="{DynamicResource ToolBarButtonHover}" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{DynamicResource ToolBarGripper}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="ToolBarHorizontalOverflowButtonStyle" TargetType="{x:Type ToggleButton}">
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="MinHeight" Value="0" />
		<Setter Property="MinWidth" Value="0" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border
						x:Name="Bd"
						Background="{TemplateBinding Background}"
						SnapsToDevicePixels="true">
						<Path
							Width="6"
							Height="4"
							Margin="2"
							HorizontalAlignment="Right"
							VerticalAlignment="Bottom"
							Data="{DynamicResource NarrowArrowDown}"
							Fill="{DynamicResource LightText}"
							SnapsToDevicePixels="True" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="Bd" Property="Background" Value="{DynamicResource ToolBarButtonHover}" />
						</Trigger>
						<Trigger Property="IsKeyboardFocused" Value="true">
							<Setter TargetName="Bd" Property="Background" Value="{DynamicResource ToolBarButtonHover}" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{DynamicResource ToolBarGripper}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<DataTrigger Binding="{Binding Source={x:Static SystemParameters.HighContrast}}" Value="true">
				<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
			</DataTrigger>
		</Style.Triggers>
	</Style>

	<Style x:Key="ToolBarThumbStyle" TargetType="{x:Type Thumb}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Thumb}">
					<Border
						Padding="{TemplateBinding Padding}"
						Background="Transparent"
						SnapsToDevicePixels="True">
						<Rectangle>
							<Rectangle.Fill>
								<DrawingBrush
									TileMode="Tile"
									Viewbox="0,0,4,4"
									ViewboxUnits="Absolute"
									Viewport="0,0,4,4"
									ViewportUnits="Absolute">
									<DrawingBrush.Drawing>
										<DrawingGroup>
											<GeometryDrawing Brush="{DynamicResource LightBorder}" Geometry="M 1 1 L 1 3 L 3 3 L 3 1 z" />
											<GeometryDrawing Brush="{DynamicResource LightestBackground}" Geometry="M 0 0 L 0 2 L 2 2 L 2 0 z" />
										</DrawingGroup>
									</DrawingBrush.Drawing>
								</DrawingBrush>
							</Rectangle.Fill>
						</Rectangle>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Cursor" Value="SizeAll" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ToolBarButtonBaseStyle" TargetType="{x:Type ButtonBase}">
		<Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" />
		<Setter Property="Background" Value="{DynamicResource LightBackground}" />
		<Setter Property="BorderBrush" Value="{DynamicResource LightBorder}" />
		<Setter Property="Foreground" Value="{DynamicResource LightText}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Padding" Value="1" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Border
						x:Name="border"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						SnapsToDevicePixels="true">
						<ContentPresenter
							x:Name="contentPresenter"
							Margin="{TemplateBinding Padding}"
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
							Focusable="False"
							RecognizesAccessKey="True"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsDefaulted" Value="true">
							<Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="border" Property="Background" Value="{DynamicResource Button.MouseOver.Background}" />
							<Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Button.MouseOver.Border}" />
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter TargetName="border" Property="Background" Value="{DynamicResource Button.Pressed.Background}" />
							<Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Button.Pressed.Border}" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter TargetName="border" Property="Background" Value="{DynamicResource Button.Disabled.Background}" />
							<Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Button.Disabled.Border}" />
							<Setter TargetName="contentPresenter" Property="TextElement.Foreground" Value="{DynamicResource DisabledText}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="{x:Static ToolBar.ButtonStyleKey}" TargetType="{x:Type Button}">
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderBrush" Value="Transparent" />
		<Setter Property="BorderThickness" Value="{DynamicResource Default_BorderThickness}" />
		<Setter Property="Foreground" Value="{DynamicResource LightText}" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="Padding" Value="3" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Border
						x:Name="PART_Border"
						Padding="{TemplateBinding Padding}"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						SnapsToDevicePixels="True">
						<ContentPresenter
							x:Name="PART_ContentPresenter"
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
							Content="{TemplateBinding Content}"
							ContentTemplate="{TemplateBinding ContentTemplate}"
							Focusable="False"
							RecognizesAccessKey="True" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="PART_Border" Property="Background" Value="{DynamicResource LighterBackground}" />
						</Trigger>
						<Trigger Property="IsPressed" Value="True">
							<Setter TargetName="PART_Border" Property="Background" Value="{DynamicResource LighterBackground}" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter TargetName="PART_Border" Property="Background" Value="{DynamicResource DarkGreySelection}" />
							<Setter Property="Foreground" Value="{DynamicResource DisabledText}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="{x:Static ToolBar.ToggleButtonStyleKey}" TargetType="{x:Type ToggleButton}">
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderBrush" Value="Transparent" />
		<Setter Property="Foreground" Value="{DynamicResource LightText}" />
		<Setter Property="BorderThickness" Value="{DynamicResource Default_BorderThickness}" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Padding" Value="3" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border
						x:Name="PART_Border"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						SnapsToDevicePixels="True">
						<ContentPresenter
							x:Name="PART_ContentPresenter"
							Margin="{TemplateBinding Padding}"
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
							Focusable="False"
							RecognizesAccessKey="True"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="Button.IsDefaulted" Value="True">
							<Setter TargetName="PART_Border" Property="BorderBrush" Value="{DynamicResource BlueBackground}" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="PART_Border" Property="Background" Value="{DynamicResource LighterBackground}" />
						</Trigger>
						<Trigger Property="IsPressed" Value="True">
							<Setter TargetName="PART_Border" Property="Background" Value="{DynamicResource LighterBackground}" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter TargetName="PART_Border" Property="Background" Value="{DynamicResource DarkGreySelection}" />
							<Setter Property="Foreground" Value="{DynamicResource DisabledText}" />
						</Trigger>
						<Trigger Property="IsChecked" Value="True">
							<Setter TargetName="PART_Border" Property="Background" Value="{DynamicResource HighlightFill}" />
							<Setter TargetName="PART_Border" Property="BorderBrush" Value="{DynamicResource HighlightBase}" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsChecked" Value="True" />
								<Condition Property="IsMouseOver" Value="True" />
							</MultiTrigger.Conditions>
							<Setter TargetName="PART_Border" Property="BorderBrush" Value="{DynamicResource GreyHighlight}" />
						</MultiTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style
		x:Key="{x:Static ToolBar.CheckBoxStyleKey}"
		BasedOn="{StaticResource {x:Type CheckBox}}"
		TargetType="{x:Type CheckBox}" />
	<Style
		x:Key="{x:Static ToolBar.RadioButtonStyleKey}"
		BasedOn="{StaticResource {x:Type RadioButton}}"
		TargetType="{x:Type RadioButton}" />
	<Style TargetType="{x:Type ToolBar}">
		<Setter Property="Background" Value="{DynamicResource GreyBackground}" />
		<Setter Property="BorderBrush" Value="{DynamicResource LightBorder}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Foreground" Value="{DynamicResource LightText}" />
		<Setter Property="Padding" Value="2,1,1,1" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToolBar}">
					<Border
						x:Name="MainPanelBorder"
						Margin="1"
						Padding="{TemplateBinding Padding}"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}">
						<Grid x:Name="Grid" SnapsToDevicePixels="True">
							<Grid.ColumnDefinitions>
								<ColumnDefinition />
								<ColumnDefinition Width="Auto" />
							</Grid.ColumnDefinitions>

							<DockPanel KeyboardNavigation.TabIndex="1" KeyboardNavigation.TabNavigation="Local">
								<Thumb
									x:Name="ToolBarThumb"
									Width="10"
									Margin="-6,0,0,0"
									Padding="6,4,0,6"
									Style="{StaticResource ToolBarThumbStyle}" />
								<ContentPresenter
									x:Name="ToolBarHeader"
									Margin="4,0,4,0"
									HorizontalAlignment="Center"
									VerticalAlignment="Center"
									ContentSource="Header"
									SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
								<ToolBarPanel
									x:Name="PART_ToolBarPanel"
									Margin="0,0,0,0"
									IsItemsHost="true"
									SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							</DockPanel>
							<Grid
								x:Name="OverflowGrid"
								Grid.Column="1"
								HorizontalAlignment="Right">
								<ToggleButton
									x:Name="OverflowButton"
									ClickMode="Press"
									FocusVisualStyle="{x:Null}"
									IsChecked="{Binding IsOverflowOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
									IsEnabled="{TemplateBinding HasOverflowItems}"
									Style="{StaticResource ToolBarHorizontalOverflowButtonStyle}"
									Visibility="{TemplateBinding HasOverflowItems,
									                             Converter={StaticResource VisibleIfTrueConverter}}" />
								<Popup
									x:Name="OverflowPopup"
									AllowsTransparency="true"
									Focusable="false"
									IsOpen="{Binding IsOverflowOpen, RelativeSource={RelativeSource TemplatedParent}}"
									Placement="Bottom"
									PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
									StaysOpen="false">
									<aero:SystemDropShadowChrome x:Name="Shdw" Color="Transparent">
										<Border
											x:Name="ToolBarSubMenuBorder"
											Background="{DynamicResource GreyBackground}"
											BorderBrush="{DynamicResource LightBorder}"
											BorderThickness="1"
											RenderOptions.ClearTypeHint="Enabled">
											<StackPanel>
												<ToolBarOverflowPanel
													x:Name="PART_ToolBarOverflowPanel"
													Margin="2"
													HorizontalAlignment="Left"
													FocusVisualStyle="{x:Null}"
													Focusable="true"
													KeyboardNavigation.DirectionalNavigation="Cycle"
													KeyboardNavigation.TabNavigation="Cycle"
													SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
													WrapWidth="200" />
												<Separator Margin="2" BorderBrush="{DynamicResource LightBorder}" />
												<MenuItem Header="Add or remove buttons..." />
											</StackPanel>
										</Border>
									</aero:SystemDropShadowChrome>
								</Popup>
							</Grid>
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsOverflowOpen" Value="true">
							<Setter TargetName="ToolBarThumb" Property="IsEnabled" Value="false" />
						</Trigger>
						<Trigger Property="Header" Value="{x:Null}">
							<Setter TargetName="ToolBarHeader" Property="Visibility" Value="Collapsed" />
						</Trigger>
						<Trigger Property="ToolBarTray.IsLocked" Value="true">
							<Setter TargetName="ToolBarThumb" Property="Visibility" Value="Collapsed" />
						</Trigger>
						<Trigger SourceName="OverflowPopup" Property="HasDropShadow" Value="true">
							<Setter TargetName="Shdw" Property="Margin" Value="0,0,5,5" />
							<Setter TargetName="Shdw" Property="SnapsToDevicePixels" Value="true" />
							<Setter TargetName="Shdw" Property="Color" Value="#71000000" />
						</Trigger>
						<Trigger Property="Orientation" Value="Vertical">
							<Setter TargetName="Grid" Property="Margin" Value="1,3,1,1" />
							<Setter TargetName="OverflowButton" Property="Style" Value="{StaticResource ToolBarVerticalOverflowButtonStyle}" />
							<Setter TargetName="ToolBarThumb" Property="Height" Value="10" />
							<Setter TargetName="ToolBarThumb" Property="Width" Value="Auto" />
							<Setter TargetName="ToolBarThumb" Property="Margin" Value="-1,-3,0,0" />
							<Setter TargetName="ToolBarThumb" Property="Padding" Value="5,6,6,1" />
							<Setter TargetName="ToolBarHeader" Property="Margin" Value="0,0,0,4" />
							<Setter TargetName="PART_ToolBarPanel" Property="Margin" Value="1,0,2,2" />
							<Setter TargetName="ToolBarThumb" Property="DockPanel.Dock" Value="Top" />
							<Setter TargetName="ToolBarHeader" Property="DockPanel.Dock" Value="Top" />
							<Setter TargetName="OverflowGrid" Property="HorizontalAlignment" Value="Stretch" />
							<Setter TargetName="OverflowGrid" Property="VerticalAlignment" Value="Bottom" />
							<Setter TargetName="OverflowPopup" Property="Placement" Value="Right" />
							<Setter TargetName="MainPanelBorder" Property="Margin" Value="0,0,0,11" />
							<Setter Property="Background" Value="{DynamicResource GreyBackground}" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{DynamicResource DisabledText}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="{x:Type local:DropDownButton}">
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="IsTabStop" Value="False" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderBrush" Value="Transparent" />
		<Setter Property="Padding" Value="3" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type local:DropDownButton}">
					<Grid x:Name="MainGrid" SnapsToDevicePixels="True">
						<ToggleButton
							x:Name="PART_DropDownButton"
							Grid.Column="1"
							IsChecked="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
							IsHitTestVisible="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource InverseBoolConverter}}">
							<ToggleButton.Template>
								<ControlTemplate TargetType="ToggleButton">
									<ContentPresenter />
								</ControlTemplate>
							</ToggleButton.Template>
							<Grid>
								<chrome:ButtonChrome
									x:Name="ToggleButtonChrome"
									Background="{TemplateBinding Background}"
									BorderBrush="{TemplateBinding BorderBrush}"
									BorderThickness="{TemplateBinding BorderThickness}"
									CornerRadius="2.75"
									Foreground="{TemplateBinding Foreground}"
									RenderChecked="{TemplateBinding IsOpen}"
									RenderEnabled="{TemplateBinding IsEnabled}"
									RenderMouseOver="{Binding IsMouseOver, ElementName=PART_DropDownButton}"
									RenderPressed="{Binding IsPressed, ElementName=PART_DropDownButton}">
									<Grid>
										<Grid.ColumnDefinitions>
											<ColumnDefinition Width="*" />
											<ColumnDefinition Width="Auto" />
										</Grid.ColumnDefinitions>
										<ContentPresenter
											Margin="{TemplateBinding Padding}"
											HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
											VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
											Content="{TemplateBinding Content}"
											ContentStringFormat="{TemplateBinding ContentStringFormat}"
											ContentTemplate="{TemplateBinding ContentTemplate}"
											RecognizesAccessKey="true" />
										<Grid
											x:Name="arrowGlyph"
											Grid.Column="1"
											Margin="0,3,3,3"
											IsHitTestVisible="False">
											<Path
												x:Name="ArrowDown"
												Data="M 3 4 L 6 0 L 0 0 Z"
												Fill="{DynamicResource LightText}"
												Stretch="Uniform" />
										</Grid>
									</Grid>
								</chrome:ButtonChrome>
							</Grid>
						</ToggleButton>

						<Popup
							x:Name="PART_Popup"
							AllowsTransparency="True"
							Focusable="False"
							HorizontalOffset="1"
							IsOpen="{Binding IsChecked, ElementName=PART_DropDownButton}"
							Placement="{TemplateBinding DropDownPosition}"
							StaysOpen="False"
							ToolTip="{x:Static sys:String.Empty}"
							VerticalOffset="1">
							<Popup.Resources>
								<Style TargetType="ToolTip">
									<Style.Triggers>
										<Trigger Property="Content" Value="{x:Static sys:String.Empty}">
											<Setter Property="Visibility" Value="Collapsed" />
										</Trigger>
									</Style.Triggers>
								</Style>
							</Popup.Resources>
							<Border
								MaxHeight="{TemplateBinding MaxDropDownHeight}"
								Background="{DynamicResource GreyBackground}"
								BorderBrush="{DynamicResource LightBorder}"
								BorderThickness="1">
								<ScrollViewer x:Name="DropDownScrollViewer" VerticalScrollBarVisibility="Auto">
									<ContentPresenter x:Name="PART_ContentPresenter" Content="{TemplateBinding DropDownContent}" />
								</ScrollViewer>
							</Border>
						</Popup>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Foreground" Value="{DynamicResource DisabledText}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
</ResourceDictionary>
