<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
	<Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
		<Setter Property="Background" Value="{DynamicResource LightBackground}" />
		<Setter Property="BorderBrush" Value="{DynamicResource GreySelection}" />
		<Setter Property="Foreground" Value="{DynamicResource LightText}" />
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="Height" Value="24" />
		<Setter Property="IsTabStop" Value="false" />
		<Setter Property="Focusable" Value="false" />
		<Setter Property="ClickMode" Value="Press" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border
						x:Name="templateRoot"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						SnapsToDevicePixels="true">
						<Border
							x:Name="splitBorder"
							Width="17"
							Margin="0"
							HorizontalAlignment="Right"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="1,0,0,0"
							SnapsToDevicePixels="true">
							<Path
								x:Name="arrow"
								Margin="0"
								HorizontalAlignment="Center"
								VerticalAlignment="Center"
								Data="M 5 5 L 10 0 L 0 0 Z"
								Fill="{DynamicResource LightText}" />
						</Border>
					</Border>
					<ControlTemplate.Triggers>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true" />
								<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="false" />
								<Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="false" />
								<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="true" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="templateRoot" Property="Background" Value="{DynamicResource LightBackground}" />
							<Setter TargetName="templateRoot" Property="BorderBrush" Value="{DynamicResource GreySelection}" />
							<Setter TargetName="splitBorder" Property="Background" Value="{DynamicResource LightBackground}" />
							<Setter TargetName="splitBorder" Property="BorderBrush" Value="{DynamicResource GreySelection}" />
						</MultiDataTrigger>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="arrow" Property="Fill" Value="{DynamicResource LightText}" />
						</Trigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
								<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="templateRoot" Property="Background" Value="{DynamicResource LightBackground}" />
							<Setter TargetName="templateRoot" Property="BorderBrush" Value="{DynamicResource GreySelection}" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
								<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="templateRoot" Property="Background" Value="{DynamicResource LightBackground}" />
							<Setter TargetName="templateRoot" Property="BorderBrush" Value="{DynamicResource GreySelection}" />
							<Setter TargetName="splitBorder" Property="Background" Value="{DynamicResource LightBackground}" />
							<Setter TargetName="splitBorder" Property="BorderBrush" Value="{DynamicResource GreySelection}" />
						</MultiDataTrigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter TargetName="arrow" Property="Fill" Value="{DynamicResource LightText}" />
						</Trigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true" />
								<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="templateRoot" Property="Background" Value="{DynamicResource LightBackground}" />
							<Setter TargetName="templateRoot" Property="BorderBrush" Value="{DynamicResource GreySelection}" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true" />
								<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="templateRoot" Property="Background" Value="{DynamicResource LightBackground}" />
							<Setter TargetName="templateRoot" Property="BorderBrush" Value="{DynamicResource GreySelection}" />
							<Setter TargetName="splitBorder" Property="Background" Value="{DynamicResource LightBackground}" />
							<Setter TargetName="splitBorder" Property="BorderBrush" Value="{DynamicResource GreySelection}" />
						</MultiDataTrigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter TargetName="arrow" Property="Fill" Value="{DynamicResource DisabledText}" />
						</Trigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false" />
								<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="templateRoot" Property="Background" Value="{DynamicResource LightBackground}" />
							<Setter TargetName="templateRoot" Property="BorderBrush" Value="{DynamicResource GreySelection}" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false" />
								<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="templateRoot" Property="Background" Value="{DynamicResource LightBackground}" />
							<Setter TargetName="templateRoot" Property="BorderBrush" Value="{DynamicResource GreySelection}" />
							<Setter TargetName="splitBorder" Property="Background" Value="{DynamicResource LightBackground}" />
							<Setter TargetName="splitBorder" Property="BorderBrush" Value="{DynamicResource GreySelection}" />
						</MultiDataTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<ControlTemplate x:Key="ComboBoxTemplate" TargetType="{x:Type ComboBox}">
		<Grid x:Name="templateRoot" SnapsToDevicePixels="true">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="*" />
				<ColumnDefinition Width="0" MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
			</Grid.ColumnDefinitions>
			<Popup
				x:Name="PART_Popup"
				Grid.ColumnSpan="2"
				Width="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
				Margin="1"
				AllowsTransparency="true"
				IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
				Placement="Bottom"
				PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
				<!--  Dropdown stuff  -->
				<Border
					x:Name="dropDownBorder"
					Background="{TemplateBinding Background}"
					BorderBrush="{TemplateBinding BorderBrush}"
					BorderThickness="1">
					<ScrollViewer x:Name="DropDownScrollViewer">
						<Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
							<Canvas
								x:Name="canvas"
								Width="0"
								Height="0"
								HorizontalAlignment="Left"
								VerticalAlignment="Top">
								<Rectangle
									x:Name="opaqueRect"
									Width="{Binding ActualWidth, ElementName=dropDownBorder}"
									Height="{Binding ActualHeight, ElementName=dropDownBorder}"
									Fill="{Binding Background, ElementName=dropDownBorder}" />
							</Canvas>
							<ItemsPresenter
								x:Name="ItemsPresenter"
								KeyboardNavigation.DirectionalNavigation="Contained"
								SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						</Grid>
					</ScrollViewer>
				</Border>
			</Popup>
			<ToggleButton
				x:Name="toggleButton"
				Grid.ColumnSpan="2"
				Background="{TemplateBinding Background}"
				BorderBrush="{TemplateBinding BorderBrush}"
				BorderThickness="{TemplateBinding BorderThickness}"
				IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
				Style="{DynamicResource ComboBoxToggleButton}" />
			<ContentPresenter
				x:Name="contentPresenter"
				Margin="{TemplateBinding Padding}"
				HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
				VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
				Content="{TemplateBinding SelectionBoxItem}"
				ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
				ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
				ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
				IsHitTestVisible="false"
				SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="HasItems" Value="false">
				<Setter TargetName="dropDownBorder" Property="Height" Value="95" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsGrouping" Value="true" />
					<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
				</MultiTrigger.Conditions>
				<Setter Property="ScrollViewer.CanContentScroll" Value="false" />
			</MultiTrigger>
			<Trigger SourceName="DropDownScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
				<Setter TargetName="opaqueRect" Property="Canvas.Top" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}" />
				<Setter TargetName="opaqueRect" Property="Canvas.Left" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<Style x:Key="ComboBoxEditableTextBox" TargetType="{x:Type TextBox}">
		<Setter Property="Foreground" Value="{DynamicResource LightText}" />
		<Setter Property="CaretBrush" Value="{DynamicResource LightText}" />
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="AllowDrop" Value="true" />
		<Setter Property="MinWidth" Value="0" />
		<Setter Property="MinHeight" Value="0" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
		<Setter Property="Stylus.IsFlicksEnabled" Value="False" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TextBox}">
					<ScrollViewer
						x:Name="PART_ContentHost"
						Background="Transparent"
						Focusable="false"
						HorizontalScrollBarVisibility="Hidden"
						VerticalScrollBarVisibility="Hidden" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<ControlTemplate x:Key="ComboBoxEditableTemplate" TargetType="{x:Type ComboBox}">
		<Grid x:Name="templateRoot" SnapsToDevicePixels="true">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="*" />
				<ColumnDefinition Width="0" MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
			</Grid.ColumnDefinitions>
			<Popup
				x:Name="PART_Popup"
				Grid.ColumnSpan="2"
				AllowsTransparency="true"
				IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
				Placement="Bottom"
				PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
				<!--  Dropdown stuff editable  -->
				<Border
					x:Name="dropDownBorder"
					Background="{TemplateBinding Background}"
					BorderBrush="{TemplateBinding BorderBrush}"
					BorderThickness="1">
					<ScrollViewer x:Name="DropDownScrollViewer">
						<Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
							<Canvas
								x:Name="canvas"
								Width="0"
								Height="0"
								HorizontalAlignment="Left"
								VerticalAlignment="Top">
								<Rectangle
									x:Name="opaqueRect"
									Width="{Binding ActualWidth, ElementName=dropDownBorder}"
									Height="{Binding ActualHeight, ElementName=dropDownBorder}"
									Fill="{Binding Background, ElementName=dropDownBorder}" />
							</Canvas>
							<ItemsPresenter
								x:Name="ItemsPresenter"
								KeyboardNavigation.DirectionalNavigation="Contained"
								SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						</Grid>
					</ScrollViewer>
				</Border>
			</Popup>
			<ToggleButton
				x:Name="toggleButton"
				Grid.ColumnSpan="2"
				Background="{TemplateBinding Background}"
				BorderBrush="{TemplateBinding BorderBrush}"
				BorderThickness="{TemplateBinding BorderThickness}"
				IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
				Style="{DynamicResource ComboBoxToggleButton}" />
			<Border
				x:Name="border"
				Margin="{TemplateBinding BorderThickness}"
				Background="{TemplateBinding Background}">
				<TextBox
					x:Name="PART_EditableTextBox"
					Margin="{TemplateBinding Padding}"
					HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
					VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
					IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
					Style="{DynamicResource ComboBoxEditableTextBox}" />
			</Border>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsEnabled" Value="false">
				<Setter TargetName="border" Property="Opacity" Value="0.56" />
			</Trigger>
			<Trigger Property="IsKeyboardFocusWithin" Value="true">
				<Setter Property="Foreground" Value="Black" />
			</Trigger>
			<Trigger Property="HasItems" Value="false">
				<Setter TargetName="dropDownBorder" Property="Height" Value="95" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsGrouping" Value="true" />
					<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
				</MultiTrigger.Conditions>
				<Setter Property="ScrollViewer.CanContentScroll" Value="false" />
			</MultiTrigger>
			<Trigger SourceName="DropDownScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
				<Setter TargetName="opaqueRect" Property="Canvas.Top" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}" />
				<Setter TargetName="opaqueRect" Property="Canvas.Left" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<Style TargetType="{x:Type ComboBox}">
		<Setter Property="Background" Value="{DynamicResource LightBackground}" />
		<Setter Property="BorderBrush" Value="{DynamicResource GreySelection}" />
		<Setter Property="Foreground" Value="{DynamicResource LightText}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
		<Setter Property="Padding" Value="6,3,5,3" />
		<Setter Property="ScrollViewer.CanContentScroll" Value="true" />
		<Setter Property="ScrollViewer.PanningMode" Value="Both" />
		<Setter Property="Stylus.IsFlicksEnabled" Value="False" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="HorizontalContentAlignment" Value="Left" />
		<Setter Property="Template" Value="{DynamicResource ComboBoxTemplate}" />
		<Style.Triggers>
			<Trigger Property="IsEditable" Value="true">
				<Setter Property="IsTabStop" Value="false" />
				<Setter Property="Padding" Value="2" />
				<Setter Property="Template" Value="{DynamicResource ComboBoxEditableTemplate}" />
			</Trigger>
		</Style.Triggers>
	</Style>

	<Style TargetType="{x:Type ComboBoxItem}">
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="Padding" Value="4,1" />
		<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
		<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
		<Setter Property="Foreground" Value="{DynamicResource LightText}" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderBrush" Value="Transparent" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ComboBoxItem}">
					<Border
						x:Name="Bd"
						Padding="{TemplateBinding Padding}"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						SnapsToDevicePixels="true">
						<ContentPresenter
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="False">
							<Setter TargetName="Bd" Property="TextElement.Foreground" Value="{DynamicResource DisabledText}" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="False" />
								<Condition Property="IsMouseOver" Value="True" />
								<Condition Property="IsKeyboardFocused" Value="False" />
							</MultiTrigger.Conditions>
							<Setter TargetName="Bd" Property="Background" Value="{DynamicResource BlueSelection}" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="True" />
								<Condition Property="IsMouseOver" Value="False" />
								<Condition Property="IsKeyboardFocused" Value="True" />
							</MultiTrigger.Conditions>
							<Setter TargetName="Bd" Property="Background" Value="{DynamicResource BlueSelection}" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="True" />
								<Condition Property="IsMouseOver" Value="True" />
							</MultiTrigger.Conditions>
							<Setter TargetName="Bd" Property="Background" Value="{DynamicResource BlueSelection}" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="True" />
								<Condition Property="IsMouseOver" Value="False" />
								<Condition Property="IsKeyboardFocused" Value="False" />
							</MultiTrigger.Conditions>
							<Setter TargetName="Bd" Property="Background" Value="{DynamicResource LightBackground}" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="False" />
								<Condition Property="IsMouseOver" Value="False" />
								<Condition Property="IsKeyboardFocused" Value="True" />
							</MultiTrigger.Conditions>
							<Setter TargetName="Bd" Property="Background" Value="{DynamicResource BlueSelection}" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="False" />
								<Condition Property="IsMouseOver" Value="True" />
								<Condition Property="IsKeyboardFocused" Value="True" />
							</MultiTrigger.Conditions>
							<Setter TargetName="Bd" Property="Background" Value="{DynamicResource BlueSelection}" />
						</MultiTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
</ResourceDictionary>
