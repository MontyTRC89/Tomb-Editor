<ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:conv="clr-namespace:Xceed.Wpf.Toolkit.Core.Converters;assembly=Xceed.Wpf.Toolkit.NET5"
	xmlns:local="clr-namespace:DarkUI.WPF"
	xmlns:prim="clr-namespace:Xceed.Wpf.Toolkit.Primitives;assembly=Xceed.Wpf.Toolkit.NET5"
	xmlns:xceed="clr-namespace:Xceed.Wpf.Toolkit;assembly=Xceed.Wpf.Toolkit.NET5">

	<BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
	<conv:InverseBoolConverter x:Key="InverseBoolConverter" />

	<Style x:Key="NumericRepeatButton" TargetType="{x:Type RepeatButton}">
		<!--  Layout  -->
		<Setter Property="SnapsToDevicePixels" Value="{x:Static local:Defaults.SnapsToDevicePixels}" />
		<Setter Property="UseLayoutRounding" Value="{x:Static local:Defaults.UseLayoutRounding}" />

		<!--  Brushes  -->
		<Setter Property="Background" Value="{DynamicResource Brush_Background_ClickableControl}" />
		<Setter Property="BorderBrush" Value="{DynamicResource Brush_Border}" />
		<Setter Property="Foreground" Value="{DynamicResource Brush_Text}" />

		<!--  Thicknesses  -->
		<Setter Property="BorderThickness">
			<Setter.Value>
				<Thickness Left="{x:Static local:Defaults.BorderThicknessWidth}" />
			</Setter.Value>
		</Setter>

		<!--  Template  -->
		<Setter Property="FocusVisualStyle" Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RepeatButton}">
					<Grid SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" UseLayoutRounding="{TemplateBinding UseLayoutRounding}">
						<Border
							x:Name="border"
							Background="{TemplateBinding Background}"
							BorderBrush="{DynamicResource Brush_Border_High}"
							BorderThickness="1,1,0,0" />
						<Border BorderBrush="{DynamicResource Brush_Border}" BorderThickness="0,0,1,1" />

						<Rectangle
							x:Name="pressRect"
							Margin="{TemplateBinding BorderThickness}"
							Fill="{DynamicResource Brush_PressHighlight}"
							Opacity="{DynamicResource Opacity_PressedHighlight}"
							Visibility="Hidden" />

						<Border Padding="{TemplateBinding Padding}" BorderThickness="{TemplateBinding BorderThickness}">
							<ContentPresenter
								x:Name="contentPresenter"
								Margin="{x:Static local:Defaults.NumericUpDown_RepeatButtonPadding}"
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								Content="{TemplateBinding Content}"
								ContentTemplate="{TemplateBinding ContentTemplate}" />
						</Border>

						<Rectangle
							x:Name="hoverRect"
							Margin="{TemplateBinding BorderThickness}"
							Fill="{DynamicResource Brush_HoverHighlight}"
							Opacity="{DynamicResource Opacity_HoveredHighlight}"
							Visibility="Hidden" />
					</Grid>

					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="False">
							<Setter TargetName="border" Property="Background" Value="{DynamicResource Brush_Background_Disabled}" />
							<Setter TargetName="contentPresenter" Property="Opacity" Value="{DynamicResource Opacity_DisabledContent}" />
						</Trigger>

						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="True" />
								<Condition Property="IsPressed" Value="False" />
							</MultiTrigger.Conditions>

							<Setter TargetName="hoverRect" Property="Visibility" Value="Visible" />
						</MultiTrigger>

						<Trigger Property="IsPressed" Value="True">
							<Setter TargetName="pressRect" Property="Visibility" Value="Visible" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="{x:Type xceed:ButtonSpinner}">
		<!--  Layout  -->
		<Setter Property="HorizontalContentAlignment" Value="Stretch" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="SnapsToDevicePixels" Value="{x:Static local:Defaults.SnapsToDevicePixels}" />
		<Setter Property="UseLayoutRounding" Value="{x:Static local:Defaults.UseLayoutRounding}" />

		<!--  Brushes  -->
		<Setter Property="Background" Value="{DynamicResource Brush_Background_ClickableControl}" />
		<Setter Property="BorderBrush" Value="{DynamicResource Brush_Border}" />
		<Setter Property="Foreground" Value="{DynamicResource Brush_Text}" />

		<!--  Thicknesses  -->
		<Setter Property="BorderThickness" Value="{x:Static local:Defaults.BorderThickness}" />
		<Setter Property="Padding">
			<Setter.Value>
				<!--  Why does "Top" need to be "ThicknessWidth_Tiny"? Because for some reason this custom control has vertical alignment problems with text.  -->
				<Thickness Bottom="{x:Static local:Defaults.InputControl_DefaultPaddingWidth}" Top="{x:Static local:Defaults.TinyThicknessWidth}" />
			</Setter.Value>
		</Setter>

		<!--  Template  -->
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type xceed:ButtonSpinner}">
					<Grid>
						<Border
							x:Name="border"
							Background="{TemplateBinding Background}"
							BorderBrush="{DynamicResource Brush_Border}"
							BorderThickness="1,1,0,0"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
							UseLayoutRounding="{TemplateBinding UseLayoutRounding}">
							<Grid>
								<Grid.ColumnDefinitions>
									<ColumnDefinition x:Name="firstContentColumn" />
									<ColumnDefinition x:Name="secondContentColumn" Width="Auto" />
								</Grid.ColumnDefinitions>

								<ContentPresenter
									x:Name="contentPresenter"
									Margin="{TemplateBinding Padding}"
									HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
									VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
								<Grid
									x:Name="gridContent"
									Grid.Column="1"
									Width="{x:Static local:Defaults.NumericUpDown_SpinnerWidth}">
									<Grid.RowDefinitions>
										<RowDefinition />
										<RowDefinition />
									</Grid.RowDefinitions>

									<RepeatButton
										x:Name="PART_IncreaseButton"
										IsTabStop="{TemplateBinding IsTabStop}"
										Style="{DynamicResource NumericRepeatButton}">
										<RepeatButton.BorderThickness>
											<Thickness Bottom="{x:Static local:Defaults.BorderThicknessWidth}" Left="{x:Static local:Defaults.BorderThicknessWidth}" />
										</RepeatButton.BorderThickness>

										<Path
											x:Name="arrowUp"
											Data="{DynamicResource NarrowArrowUp}"
											Fill="{TemplateBinding Foreground}"
											SnapsToDevicePixels="False"
											Stretch="Uniform"
											UseLayoutRounding="False" />
									</RepeatButton>

									<RepeatButton
										x:Name="PART_DecreaseButton"
										Grid.Row="1"
										IsTabStop="{TemplateBinding IsTabStop}"
										Style="{DynamicResource NumericRepeatButton}">
										<RepeatButton.BorderThickness>
											<Thickness Left="{x:Static local:Defaults.BorderThicknessWidth}" Top="{x:Static local:Defaults.BorderThicknessWidth}" />
										</RepeatButton.BorderThickness>

										<Path
											x:Name="arrowDown"
											Data="{DynamicResource NarrowArrowDown}"
											Fill="{TemplateBinding Foreground}"
											SnapsToDevicePixels="False"
											Stretch="Uniform"
											UseLayoutRounding="False" />
									</RepeatButton>
								</Grid>
							</Grid>
						</Border>
						<Border BorderBrush="{DynamicResource Brush_Border_High}" BorderThickness="0,0,1,1" />
					</Grid>

					<ControlTemplate.Triggers>
						<Trigger Property="ShowButtonSpinner" Value="False">
							<Setter TargetName="gridContent" Property="Visibility" Value="Collapsed" />
						</Trigger>

						<Trigger Property="ShowSpinner" Value="False">
							<Setter TargetName="gridContent" Property="Visibility" Value="Collapsed" />
						</Trigger>

						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Background" Value="{DynamicResource Brush_Background_Disabled}" />
						</Trigger>

						<Trigger SourceName="PART_IncreaseButton" Property="IsEnabled" Value="False">
							<Setter TargetName="arrowUp" Property="Opacity" Value="{DynamicResource Opacity_DisabledContent}" />
						</Trigger>

						<Trigger SourceName="PART_DecreaseButton" Property="IsEnabled" Value="False">
							<Setter TargetName="arrowDown" Property="Opacity" Value="{DynamicResource Opacity_DisabledContent}" />
						</Trigger>

						<Trigger Property="SpinnerLocation" Value="Left">
							<Setter TargetName="gridContent" Property="Grid.Column" Value="0" />
							<Setter TargetName="firstContentColumn" Property="Width" Value="Auto" />
							<Setter TargetName="secondContentColumn" Property="Width" Value="*" />
							<Setter TargetName="contentPresenter" Property="Grid.Column" Value="1" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="NumericUpDown" TargetType="{x:Type prim:InputBase}">
		<!--  Control properties  -->
		<Setter Property="IsTabStop" Value="False" />

		<!--  Layout  -->
		<Setter Property="Height" Value="{x:Static local:Defaults.InputControl_Height}" />
		<Setter Property="HorizontalContentAlignment" Value="Right" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="FontSize" Value="{x:Static local:Defaults.FontSize}" />
		<Setter Property="TextAlignment" Value="Right" />
		<Setter Property="SnapsToDevicePixels" Value="{x:Static local:Defaults.SnapsToDevicePixels}" />
		<Setter Property="UseLayoutRounding" Value="{x:Static local:Defaults.UseLayoutRounding}" />

		<!--  Brushes  -->
		<Setter Property="Background" Value="{DynamicResource Brush_Background_TextControl}" />
		<Setter Property="BorderBrush" Value="{DynamicResource Brush_Border}" />
		<Setter Property="Foreground" Value="{DynamicResource Brush_Text}" />

		<!--  Thicknesses  -->
		<Setter Property="BorderThickness" Value="{x:Static local:Defaults.BorderThickness}" />

		<!--  Template  -->
		<Setter Property="FocusVisualStyle" Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Control">
					<xceed:ButtonSpinner
						x:Name="PART_Spinner"
						HorizontalContentAlignment="Stretch"
						VerticalContentAlignment="Stretch"
						AllowSpin="{Binding AllowSpin, RelativeSource={RelativeSource TemplatedParent}}"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						IsTabStop="False"
						ShowSpinner="{Binding ShowButtonSpinner, RelativeSource={RelativeSource TemplatedParent}}"
						SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
						SpinnerHeight="{Binding ButtonSpinnerHeight, RelativeSource={RelativeSource TemplatedParent}}"
						SpinnerLocation="{Binding ButtonSpinnerLocation, RelativeSource={RelativeSource TemplatedParent}}"
						SpinnerWidth="{Binding ButtonSpinnerWidth, RelativeSource={RelativeSource TemplatedParent}}"
						UseLayoutRounding="{TemplateBinding UseLayoutRounding}">
						<xceed:WatermarkTextBox
							x:Name="PART_TextBox"
							Padding="{TemplateBinding Padding}"
							HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
							AcceptsReturn="False"
							AutoMoveFocus="{Binding AutoMoveFocus, RelativeSource={RelativeSource TemplatedParent}}"
							AutoSelectBehavior="{Binding AutoSelectBehavior, RelativeSource={RelativeSource TemplatedParent}}"
							Background="Transparent"
							BorderThickness="0"
							CaretBrush="{TemplateBinding Foreground}"
							ContextMenu="{TemplateBinding ContextMenu}"
							FontFamily="{TemplateBinding FontFamily}"
							FontSize="{TemplateBinding FontSize}"
							FontStretch="{TemplateBinding FontStretch}"
							FontStyle="{TemplateBinding FontStyle}"
							FontWeight="{TemplateBinding FontWeight}"
							Foreground="{TemplateBinding Foreground}"
							IsTabStop="True"
							IsUndoEnabled="{Binding IsUndoEnabled, RelativeSource={RelativeSource TemplatedParent}}"
							MaxLength="{Binding MaxLength, RelativeSource={RelativeSource TemplatedParent}}"
							TabIndex="{TemplateBinding TabIndex}"
							TextAlignment="{Binding TextAlignment, RelativeSource={RelativeSource TemplatedParent}}"
							TextWrapping="NoWrap"
							Watermark="{Binding Watermark, RelativeSource={RelativeSource TemplatedParent}}"
							WatermarkTemplate="{Binding WatermarkTemplate, RelativeSource={RelativeSource TemplatedParent}}">
							<xceed:WatermarkTextBox.Style>
								<Style BasedOn="{StaticResource {x:Type xceed:WatermarkTextBox}}" TargetType="{x:Type xceed:WatermarkTextBox}">
									<Setter Property="Template">
										<Setter.Value>
											<ControlTemplate TargetType="{x:Type xceed:WatermarkTextBox}">
												<ScrollViewer x:Name="PART_ContentHost">
													<ScrollViewer.ContentTemplate>
														<DataTemplate>
															<Grid Background="{Binding Background, ElementName=PART_ContentHost}" RenderOptions.ClearTypeHint="Enabled">
																<ContentPresenter Content="{Binding Path=Content, ElementName=PART_ContentHost}" />
															</Grid>
														</DataTemplate>
													</ScrollViewer.ContentTemplate>
												</ScrollViewer>
											</ControlTemplate>
										</Setter.Value>
									</Setter>
								</Style>
							</xceed:WatermarkTextBox.Style>
						</xceed:WatermarkTextBox>
					</xceed:ButtonSpinner>

					<ControlTemplate.Triggers>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsReadOnly, RelativeSource={RelativeSource Self}}" Value="False" />
								<Condition Binding="{Binding AllowTextInput, RelativeSource={RelativeSource Self}}" Value="False" />
							</MultiDataTrigger.Conditions>

							<Setter TargetName="PART_TextBox" Property="IsReadOnly" Value="True" />
						</MultiDataTrigger>

						<DataTrigger Binding="{Binding IsReadOnly, RelativeSource={RelativeSource Self}}" Value="True">
							<Setter TargetName="PART_TextBox" Property="IsReadOnly" Value="True" />
						</DataTrigger>

						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Background" Value="{DynamicResource Brush_Background_Disabled}" />
							<Setter TargetName="PART_TextBox" Property="Opacity" Value="{DynamicResource Opacity_DisabledContent}" />
						</Trigger>

						<Trigger Property="IsFocused" Value="True">
							<Setter TargetName="PART_TextBox" Property="FocusManager.FocusedElement" Value="{Binding ElementName=PART_TextBox}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--  ===============================================================================  -->
	<!--  DecimalUpDown  -->
	<!--  ===============================================================================  -->
	<Style BasedOn="{StaticResource NumericUpDown}" TargetType="{x:Type xceed:DecimalUpDown}" />

	<!--  ===============================================================================  -->
	<!--  DoubleUpDown  -->
	<!--  ===============================================================================  -->
	<Style BasedOn="{StaticResource NumericUpDown}" TargetType="{x:Type xceed:DoubleUpDown}" />

	<!--  ===============================================================================  -->
	<!--  IntegerUpDown  -->
	<!--  ===============================================================================  -->
	<Style BasedOn="{StaticResource NumericUpDown}" TargetType="{x:Type xceed:IntegerUpDown}" />

	<!--  ===============================================================================  -->
	<!--  ShortUpDown  -->
	<!--  ===============================================================================  -->
	<Style BasedOn="{StaticResource NumericUpDown}" TargetType="{x:Type xceed:ShortUpDown}" />

	<!--  ===============================================================================  -->
	<!--  LongUpDown  -->
	<!--  ===============================================================================  -->
	<Style BasedOn="{StaticResource NumericUpDown}" TargetType="{x:Type xceed:LongUpDown}" />

	<!--  ===============================================================================  -->
	<!--  ByteUpDown  -->
	<!--  ===============================================================================  -->
	<Style BasedOn="{StaticResource NumericUpDown}" TargetType="{x:Type xceed:ByteUpDown}" />

	<!--  ===============================================================================  -->
	<!--  SingleUpDown  -->
	<!--  ===============================================================================  -->
	<Style BasedOn="{StaticResource NumericUpDown}" TargetType="{x:Type xceed:SingleUpDown}" />

	<!--  ===============================================================================  -->
	<!--  SByteUpDown  -->
	<!--  ===============================================================================  -->
	<Style BasedOn="{StaticResource NumericUpDown}" TargetType="{x:Type xceed:SByteUpDown}" />

	<!--  ===============================================================================  -->
	<!--  UIntegerUpDown  -->
	<!--  ===============================================================================  -->
	<Style BasedOn="{StaticResource NumericUpDown}" TargetType="{x:Type xceed:UIntegerUpDown}" />

	<!--  ===============================================================================  -->
	<!--  ULongUpDown  -->
	<!--  ===============================================================================  -->
	<Style BasedOn="{StaticResource NumericUpDown}" TargetType="{x:Type xceed:ULongUpDown}" />

	<!--  ===============================================================================  -->
	<!--  UShortUpDown  -->
	<!--  ===============================================================================  -->
	<Style BasedOn="{StaticResource NumericUpDown}" TargetType="{x:Type xceed:UShortUpDown}" />
</ResourceDictionary>
