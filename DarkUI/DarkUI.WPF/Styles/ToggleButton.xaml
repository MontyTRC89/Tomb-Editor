<ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:local="clr-namespace:DarkUI.WPF">

	<ResourceDictionary.MergedDictionaries>
		<ResourceDictionary Source="/DarkUI.WPF;component/Styles/Icon.xaml" />
	</ResourceDictionary.MergedDictionaries>

	<Style TargetType="{x:Type ToggleButton}">
		<!--  Layout  -->
		<Setter Property="Height" Value="{x:Static local:Defaults.InputControl_Height}" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="SnapsToDevicePixels" Value="{x:Static local:Defaults.SnapsToDevicePixels}" />
		<Setter Property="UseLayoutRounding" Value="{x:Static local:Defaults.UseLayoutRounding}" />

		<!--  Brushes  -->
		<Setter Property="Background" Value="{DynamicResource Brush_Background_ClickableControl}" />
		<Setter Property="BorderBrush" Value="{DynamicResource Brush_Border}" />
		<Setter Property="Foreground" Value="{DynamicResource Brush_Text}" />

		<!--  Thicknesses  -->
		<Setter Property="BorderThickness" Value="{x:Static local:Defaults.BorderThickness}" />
		<Setter Property="Padding">
			<Setter.Value>
				<Thickness
					Bottom="{x:Static local:Defaults.InputControl_DefaultPaddingWidth}"
					Left="{x:Static local:Defaults.InputControl_LargePaddingWidth}"
					Right="{x:Static local:Defaults.InputControl_LargePaddingWidth}"
					Top="{x:Static local:Defaults.InputControl_DefaultPaddingWidth}" />
			</Setter.Value>
		</Setter>

		<!--  Template  -->
		<Setter Property="FocusVisualStyle" Value="{DynamicResource {x:Static SystemParameters.FocusVisualStyleKey}}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Grid SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" UseLayoutRounding="{TemplateBinding UseLayoutRounding}">
						<Border
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}" />

						<Rectangle
							x:Name="hoverRect"
							Margin="{TemplateBinding BorderThickness}"
							Fill="{DynamicResource Brush_HoverHighlight}"
							Opacity="{DynamicResource Opacity_HoveredHighlight}"
							Visibility="Hidden" />
						<Rectangle
							x:Name="checkedRect"
							Margin="{TemplateBinding BorderThickness}"
							Fill="{DynamicResource Brush_CheckedHighlight}"
							Opacity="{DynamicResource Opacity_CheckedHighlight}"
							Visibility="Hidden" />

						<Border Padding="{TemplateBinding Padding}" BorderThickness="{TemplateBinding BorderThickness}">
							<ContentPresenter
								x:Name="contentPresenter"
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								Content="{TemplateBinding Content}"
								ContentTemplate="{TemplateBinding ContentTemplate}"
								RecognizesAccessKey="True" />
						</Border>
					</Grid>

					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Background" Value="{DynamicResource Brush_Background_Disabled}" />
							<Setter TargetName="contentPresenter" Property="Opacity" Value="{DynamicResource Opacity_DisabledContent}" />
						</Trigger>

						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="True" />
								<Condition Property="IsPressed" Value="False" />
								<Condition Property="IsChecked" Value="False" />
							</MultiTrigger.Conditions>

							<Setter TargetName="hoverRect" Property="Visibility" Value="Visible" />
						</MultiTrigger>

						<Trigger Property="IsChecked" Value="True">
							<Setter Property="BorderBrush" Value="{DynamicResource Brush_CheckedHighlight}" />
							<Setter TargetName="checkedRect" Property="Visibility" Value="Visible" />
						</Trigger>

						<Trigger Property="IsPressed" Value="True">
							<Setter Property="BorderBrush" Value="{DynamicResource Brush_Border}" />
							<Setter TargetName="checkedRect" Property="Visibility" Value="Visible" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style
		x:Key="ToggleButtonWithIconAndText"
		BasedOn="{StaticResource {x:Type ToggleButton}}"
		TargetType="{x:Type ToggleButton}">
		<Style.Resources>
			<Style BasedOn="{StaticResource SmallImageIconForButtonsWithText}" TargetType="{x:Type Image}" />
			<Style BasedOn="{StaticResource SmallPathIconForButtonsWithText}" TargetType="{x:Type Path}" />
		</Style.Resources>
	</Style>

	<Style
		x:Key="ToggleButtonWithIconOnly"
		BasedOn="{StaticResource {x:Type ToggleButton}}"
		TargetType="{x:Type ToggleButton}">
		<Setter Property="MinWidth" Value="{x:Static local:Defaults.InputControl_Height}" />
		<Setter Property="Padding" Value="{x:Static local:Defaults.InputControl_DefaultPadding}" />

		<Style.Resources>
			<Style BasedOn="{StaticResource SmallImageIcon}" TargetType="{x:Type Image}" />
			<Style BasedOn="{StaticResource SmallPathIcon}" TargetType="{x:Type Path}" />
		</Style.Resources>
	</Style>

	<Style
		x:Key="{x:Static ToolBar.ToggleButtonStyleKey}"
		BasedOn="{StaticResource ToggleButtonWithIconOnly}"
		TargetType="{x:Type ToggleButton}">
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderBrush" Value="Transparent" />
	</Style>
</ResourceDictionary>
