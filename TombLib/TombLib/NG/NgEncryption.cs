using System.IO;
using TombLib.IO;

namespace TombLib.NG
{
    public static class NgEncryption
    {
        private const int _keyLength = 99;

        private static byte[][] _key = new byte[][]
        {
            new byte [] { 0x38, 0x22, 0xE9, 0x4F, 0x20, 0xF1, 0x37, 0x69, 0x15, 0x13, 0xD3, 0x90, 0x17, 0x84, 0xC2, 0x09, 0xAD, 0x04, 0xBE, 0xD2, 0x52, 0x18, 0x0B, 0xEC, 0x47, 0x38, 0xA8, 0x14, 0x8D, 0xAA, 0x97, 0xD0, 0xDF, 0x29, 0x92, 0x99, 0xC8, 0xF8, 0xDE, 0x70, 0xBD, 0x1A, 0x7C, 0xDB, 0xBF, 0x8B, 0x27, 0x53, 0x56, 0x4E, 0x67, 0x1D, 0xFA, 0x1E, 0xB3, 0xF2, 0xEF, 0x3F, 0x51, 0x5E, 0x35, 0xB0, 0xFB, 0xD6, 0x88, 0x2F, 0x3B, 0xA0, 0x2D, 0x43, 0x87, 0xBA, 0x22, 0x64, 0x25, 0xE1, 0x68, 0xD5, 0xCF, 0x5A, 0xFE, 0x54, 0x0F, 0x23, 0xA2, 0x24, 0x5C, 0x3E, 0x98, 0x89, 0xF9, 0x65, 0xDD, 0xB7, 0xA3, 0xDD, 0x31, 0x7A, 0xE3 },
            new byte [] { 0xA6, 0xD4, 0x4A, 0x30, 0xC0, 0xCA, 0x6A, 0xCD, 0xE8, 0x10, 0xDC, 0x78, 0xA4, 0xA7, 0x9F, 0xB7, 0x2A, 0x4B, 0x6F, 0x04, 0x44, 0x40, 0x8F, 0xA1, 0xAF, 0x86, 0x02, 0x4C, 0x28, 0xD9, 0x80, 0x8C, 0xF0, 0x7D, 0x94, 0xD8, 0xC7, 0x72, 0xB4, 0x32, 0x33, 0xB8, 0xE2, 0x21, 0xAB, 0x0C, 0xA5, 0x1C, 0x74, 0xF3, 0x75, 0xAC, 0x8E, 0xE8, 0x96, 0x07, 0xB5, 0xEA, 0x08, 0xF4, 0x2E, 0x82, 0xCA, 0xF0, 0xF7, 0x26, 0x9A, 0x81, 0x12, 0x1B, 0xBB, 0xDA, 0x39, 0x61, 0x2D, 0xC9, 0xB1, 0xB4, 0xAC, 0xC4, 0x7B, 0x9C, 0xBF, 0x11, 0x95, 0x91, 0xE0, 0xAE, 0xBC, 0x93, 0x0F, 0x9D, 0x35, 0x2B, 0xD1, 0x99, 0xFD, 0xCE, 0xA1 },
            new byte [] { 0xE5, 0x19, 0xC3, 0xC1, 0x83, 0x83, 0x0A, 0x34, 0x71, 0xFB, 0x5D, 0xF6, 0x6D, 0xC5, 0x01, 0xC6, 0xB9, 0x9B, 0xF5, 0xE7, 0x57, 0x07, 0x3C, 0x59, 0x46, 0x7F, 0xD2, 0xD7, 0x41, 0x49, 0x77, 0xEB, 0x8E, 0x1F, 0x6C, 0x0D, 0x2C, 0x8A, 0xB2, 0x7E, 0x1A, 0x03, 0x05, 0xFC, 0x16, 0xCB, 0xA9, 0xCC, 0x62, 0xE5, 0x9E, 0xED, 0xFF, 0x0E, 0xE4, 0x5F, 0xEE, 0x85, 0x38, 0x22, 0xE9, 0x4F, 0x20, 0xF1, 0x37, 0x69, 0x15, 0x13, 0xD3, 0x90, 0x17, 0x84, 0xC2, 0x09, 0xAD, 0x04, 0xBE, 0xD2, 0x52, 0x18, 0x0B, 0xEC, 0x47, 0x38, 0xA8, 0x14, 0x8D, 0xAA, 0x97, 0xD0, 0xDF, 0x29, 0x92, 0x99, 0xC8, 0xF8, 0xDE, 0x70, 0xBD },
            new byte [] { 0x1A, 0x7C, 0xDB, 0xBF, 0x8B, 0x27, 0x53, 0x56, 0x4E, 0x67, 0x1D, 0xFA, 0x1E, 0xB3, 0xF2, 0xEF, 0x3F, 0x51, 0x5E, 0x35, 0xB0, 0xFB, 0xD6, 0x88, 0x2F, 0x3B, 0xA0, 0x2D, 0x43, 0x87, 0xBA, 0x22, 0x64, 0x25, 0xE1, 0x68, 0xD5, 0xCF, 0x5A, 0xFE, 0x54, 0x0F, 0x23, 0xA2, 0x24, 0x5C, 0x3E, 0x98, 0x89, 0xF9, 0x65, 0xDD, 0xB7, 0xA3, 0xDD, 0x31, 0x7A, 0xE3, 0xA6, 0xD4, 0x4A, 0x30, 0xC0, 0xCA, 0x6A, 0xCD, 0xE8, 0x10, 0xDC, 0x78, 0xA4, 0xA7, 0x9F, 0xB7, 0x2A, 0x4B, 0x6F, 0x04, 0x44, 0x40, 0x8F, 0xA1, 0xAF, 0x86, 0x02, 0x4C, 0x28, 0xD9, 0x80, 0x8C, 0xF0, 0x7D, 0x94, 0xD8, 0xC7, 0x72, 0xB4, 0x32, 0x33 },
            new byte [] { 0xB8, 0xE2, 0x21, 0xAB, 0x0C, 0xA5, 0x1C, 0x74, 0xF3, 0x75, 0xAC, 0x8E, 0xE8, 0x96, 0x07, 0xB5, 0xEA, 0x08, 0xF4, 0x2E, 0x82, 0xCA, 0xF0, 0xF7, 0x26, 0x9A, 0x81, 0x12, 0x1B, 0xBB, 0xDA, 0x39, 0x61, 0x2D, 0xC9, 0xB1, 0xB4, 0xAC, 0xC4, 0x7B, 0x9C, 0xBF, 0x11, 0x95, 0x91, 0xE0, 0xAE, 0xBC, 0x93, 0x0F, 0x9D, 0x35, 0x2B, 0xD1, 0x99, 0xFD, 0xCE, 0xA1, 0xE5, 0x19, 0xC3, 0xC1, 0x83, 0x83, 0x0A, 0x34, 0x71, 0xFB, 0x5D, 0xF6, 0x6D, 0xC5, 0x01, 0xC6, 0xB9, 0x9B, 0xF5, 0xE7, 0x57, 0x07, 0x3C, 0x59, 0x46, 0x7F, 0xD2, 0xD7, 0x41, 0x49, 0x77, 0xEB, 0x8E, 0x1F, 0x6C, 0x0D, 0x2C, 0x8A, 0xB2, 0x7E, 0x1A },
            new byte [] { 0x03, 0x05, 0xFC, 0x16, 0xCB, 0xA9, 0xCC, 0x62, 0xE5, 0x9E, 0xED, 0xFF, 0x0E, 0xE4, 0x5F, 0xEE, 0x85, 0x38, 0x22, 0xE9, 0x4F, 0x20, 0xF1, 0x37, 0x69, 0x15, 0x13, 0xD3, 0x90, 0x17, 0x84, 0xC2, 0x09, 0xAD, 0x04, 0xBE, 0xD2, 0x52, 0x18, 0x0B, 0xEC, 0x47, 0x38, 0xA8, 0x14, 0x8D, 0xAA, 0x97, 0xD0, 0xDF, 0x29, 0x92, 0x99, 0xC8, 0xF8, 0xDE, 0x70, 0xBD, 0x1A, 0x7C, 0xDB, 0xBF, 0x8B, 0x27, 0x53, 0x56, 0x4E, 0x67, 0x1D, 0xFA, 0x1E, 0xB3, 0xF2, 0xEF, 0x3F, 0x51, 0x5E, 0x35, 0xB0, 0xFB, 0xD6, 0x88, 0x2F, 0x3B, 0xA0, 0x2D, 0x43, 0x87, 0xBA, 0x22, 0x64, 0x25, 0xE1, 0x68, 0xD5, 0xCF, 0x5A, 0xFE, 0x54 },
            new byte [] { 0x0F, 0x23, 0xA2, 0x24, 0x5C, 0x3E, 0x98, 0x89, 0xF9, 0x65, 0xDD, 0xB7, 0xA3, 0xDD, 0x31, 0x7A, 0xE3, 0xA6, 0xD4, 0x4A, 0x30, 0xC0, 0xCA, 0x6A, 0xCD, 0xE8, 0x10, 0xDC, 0x78, 0xA4, 0xA7, 0x9F, 0xB7, 0x2A, 0x4B, 0x6F, 0x04, 0x44, 0x40, 0x8F, 0xA1, 0xAF, 0x86, 0x02, 0x4C, 0x28, 0xD9, 0x80, 0x8C, 0xF0, 0x7D, 0x94, 0xD8, 0xC7, 0x72, 0xB4, 0x32, 0x33, 0xB8, 0xE2, 0x21, 0xAB, 0x0C, 0xA5, 0x1C, 0x74, 0xF3, 0x75, 0xAC, 0x8E, 0xE8, 0x96, 0x07, 0xB5, 0xEA, 0x08, 0xF4, 0x2E, 0x82, 0xCA, 0xF0, 0xF7, 0x26, 0x9A, 0x81, 0x12, 0x1B, 0xBB, 0xDA, 0x39, 0x61, 0x2D, 0xC9, 0xB1, 0xB4, 0xAC, 0xC4, 0x7B, 0x9C },
            new byte [] { 0xBF, 0x11, 0x95, 0x91, 0xE0, 0xAE, 0xBC, 0x93, 0x0F, 0x9D, 0x35, 0x2B, 0xD1, 0x99, 0xFD, 0xCE, 0xA1, 0xE5, 0x19, 0xC3, 0xC1, 0x83, 0x83, 0x0A, 0x34, 0x71, 0xFB, 0x5D, 0xF6, 0x6D, 0xC5, 0x01, 0xC6, 0xB9, 0x9B, 0xF5, 0xE7, 0x57, 0x07, 0x3C, 0x59, 0x46, 0x7F, 0xD2, 0xD7, 0x41, 0x49, 0x77, 0xEB, 0x8E, 0x1F, 0x6C, 0x0D, 0x2C, 0x8A, 0xB2, 0x7E, 0x1A, 0x03, 0x05, 0xFC, 0x16, 0xCB, 0xA9, 0xCC, 0x62, 0xE5, 0x9E, 0xED, 0xFF, 0x0E, 0xE4, 0x5F, 0xEE, 0x85, 0x38, 0x22, 0xE9, 0x4F, 0x20, 0xF1, 0x37, 0x69, 0x15, 0x13, 0xD3, 0x90, 0x17, 0x84, 0xC2, 0x09, 0xAD, 0x04, 0xBE, 0xD2, 0x52, 0x18, 0x0B, 0xEC },
            new byte [] { 0x47, 0x38, 0xA8, 0x14, 0x8D, 0xAA, 0x97, 0xD0, 0xDF, 0x29, 0x92, 0x99, 0xC8, 0xF8, 0xDE, 0x70, 0xBD, 0x1A, 0x7C, 0xDB, 0xBF, 0x8B, 0x27, 0x53, 0x56, 0x4E, 0x67, 0x1D, 0xFA, 0x1E, 0xB3, 0xF2, 0xEF, 0x3F, 0x51, 0x5E, 0x35, 0xB0, 0xFB, 0xD6, 0x88, 0x2F, 0x3B, 0xA0, 0x2D, 0x43, 0x87, 0xBA, 0x22, 0x64, 0x25, 0xE1, 0x68, 0xD5, 0xCF, 0x5A, 0xFE, 0x54, 0x0F, 0x23, 0xA2, 0x24, 0x5C, 0x3E, 0x98, 0x89, 0xF9, 0x65, 0xDD, 0xB7, 0xA3, 0xDD, 0x31, 0x7A, 0xE3, 0xA6, 0xD4, 0x4A, 0x30, 0xC0, 0xCA, 0x6A, 0xCD, 0xE8, 0x10, 0xDC, 0x78, 0xA4, 0xA7, 0x9F, 0xB7, 0x2A, 0x4B, 0x6F, 0x04, 0xBC, 0xB8, 0x08, 0x1A },
            new byte [] { 0x28, 0xFE, 0x79, 0xC4, 0x9F, 0x51, 0xF8, 0x04, 0x69, 0xF5, 0x0C, 0x50, 0x3F, 0xEA, 0x2D, 0xAA, 0xAA, 0x31, 0x5B, 0x98, 0x23, 0x84, 0x1E, 0x94, 0xEC, 0x6C, 0xED, 0x25, 0x07, 0x61, 0x0E, 0x7E, 0x2E, 0x63, 0x80, 0x6D, 0xA6, 0xF9, 0x43, 0x68, 0x6F, 0x9E, 0x13, 0xF8, 0x8A, 0x93, 0x33, 0x52, 0xB1, 0xD9, 0xA5, 0x41, 0x2A, 0x2C, 0x24, 0x3D, 0xF2, 0x15, 0x38, 0x89, 0x0D, 0x0A, 0x59, 0x27, 0x35, 0x0C, 0x86, 0x16, 0xAC, 0xA2, 0x49, 0x11, 0x76, 0x47, 0x19, 0x5D, 0x90, 0x3C, 0x3A, 0xFA, 0xFB, 0x81, 0xAB, 0xE9, 0x74, 0xD4, 0x6E, 0xE5, 0x3D, 0x79, 0x3E, 0x32, 0x14, 0x6E, 0x5F, 0xCF, 0x7F, 0xB4, 0xD0 },
            new byte [] { 0xBD, 0xF7, 0x4B, 0x50, 0xB9, 0xC0, 0xEE, 0x63, 0x06, 0x97, 0xE4, 0x84, 0xA3, 0x02, 0x2A, 0xF6, 0x92, 0x7A, 0x7D, 0x75, 0x8D, 0x44, 0x21, 0x45, 0xDA, 0x5E, 0x17, 0x66, 0x78, 0x85, 0x5C, 0xD7, 0x66, 0xFD, 0xAF, 0x9A, 0x62, 0xC7, 0x97, 0x6A, 0xAE, 0xE1, 0x8C, 0x8B, 0x4C, 0x09, 0x8E, 0xFC, 0x3B, 0x81, 0x26, 0x7B, 0x36, 0x4A, 0xC9, 0x8F, 0x82, 0x65, 0xBE, 0xB0, 0x20, 0x8C, 0x05, 0x22, 0x0F, 0x48, 0x58, 0xA0, 0x0B, 0x12, 0x40, 0x70, 0x57, 0xE7, 0x35, 0x91, 0xF4, 0x53, 0x37, 0x04, 0x9F, 0xCB, 0xCE, 0xC6, 0xDE, 0x95, 0x72, 0x96, 0x2B, 0x6B, 0x67, 0xB6, 0xC8, 0xD6, 0xAD, 0x29, 0x73, 0x4F, 0x01 },
            new byte [] { 0xA7, 0xB2, 0x18, 0xA4, 0xBB, 0xFF, 0x32, 0x99, 0xDB, 0x9D, 0x5A, 0xDF, 0x4E, 0x48, 0xD1, 0x77, 0xCC, 0x87, 0x9B, 0x1B, 0x9C, 0xD3, 0xB5, 0x10, 0x01, 0x71, 0xDC, 0x56, 0x2F, 0x1C, 0x55, 0xA9, 0xF1, 0x5B, 0x1F, 0x4D, 0xC1, 0xA8, 0x39, 0x42, 0xE2, 0x46, 0x60, 0x88, 0x54, 0xEF, 0x1D, 0x1F, 0x17, 0x30, 0xA1, 0xC3, 0xE6, 0x7C, 0xBC, 0xB8, 0x08, 0x1A, 0x28, 0xFE, 0x79, 0xC4, 0x9F, 0x51, 0xF8, 0x04, 0x69, 0xF5, 0x0C, 0x50, 0x3F, 0xEA, 0x2D, 0xAA, 0xAA, 0x31, 0x5B, 0x98, 0x23, 0x84, 0x1E, 0x94, 0xEC, 0x6C, 0xED, 0x25, 0x07, 0x61, 0x0E, 0x7E, 0x2E, 0x63, 0x80, 0x6D, 0xA6, 0xF9, 0x43, 0x68, 0x6F },
            new byte [] { 0x9E, 0x13, 0xF8, 0x8A, 0x93, 0x33, 0x52, 0xB1, 0xD9, 0xA5, 0x41, 0x2A, 0x2C, 0x24, 0x3D, 0xF2, 0x15, 0x38, 0x89, 0x0D, 0x0A, 0x59, 0x27, 0x35, 0x0C, 0x86, 0x16, 0xAC, 0xA2, 0x49, 0x11, 0x76, 0x47, 0x19, 0x5D, 0x90, 0x3C, 0x3A, 0xFA, 0xFB, 0x81, 0xAB, 0xE9, 0x74, 0xD4, 0x6E, 0xE5, 0x3D, 0x79, 0x3E, 0x32, 0x14, 0x6E, 0x5F, 0xCF, 0x7F, 0xB4, 0xD0, 0xBD, 0xF7, 0x4B, 0x50, 0xB9, 0xC0, 0xEE, 0x63, 0x06, 0x97, 0xE4, 0x84, 0xA3, 0x02, 0x2A, 0xF6, 0x92, 0x7A, 0x7D, 0x75, 0x8D, 0x44, 0x21, 0x45, 0xDA, 0x5E, 0x17, 0x66, 0x78, 0x85, 0x5C, 0xD7, 0x66, 0xFD, 0xAF, 0x9A, 0x62, 0xC7, 0x97, 0x6A, 0xAE },
            new byte [] { 0xE1, 0x8C, 0x8B, 0x4C, 0x09, 0x8E, 0xFC, 0x3B, 0x81, 0x26, 0x7B, 0x36, 0x4A, 0xC9, 0x8F, 0x82, 0x65, 0xBE, 0xB0, 0x20, 0x8C, 0x05, 0x22, 0x0F, 0x48, 0x58, 0xA0, 0x0B, 0x12, 0x40, 0x70, 0x57, 0xE7, 0x35, 0x91, 0xF4, 0x53, 0x37, 0x04, 0x9F, 0xCB, 0xCE, 0xC6, 0xDE, 0x95, 0x72, 0x96, 0x2B, 0x6B, 0x67, 0xB6, 0xC8, 0xD6, 0xAD, 0x29, 0x73, 0x4F, 0x01, 0xA7, 0xB2, 0x18, 0xA4, 0xBB, 0xFF, 0x32, 0x99, 0xDB, 0x9D, 0x5A, 0xDF, 0x4E, 0x48, 0xD1, 0x77, 0xCC, 0x87, 0x9B, 0x1B, 0x9C, 0xD3, 0xB5, 0x10, 0x01, 0x71, 0xDC, 0x56, 0x2F, 0x1C, 0x55, 0xA9, 0xF1, 0x5B, 0x1F, 0x4D, 0xC1, 0xA8, 0x39, 0x42, 0xE2 },
            new byte [] { 0x46, 0x60, 0x88, 0x54, 0xEF, 0x1D, 0x1F, 0x17, 0x30, 0xA1, 0xC3, 0xE6, 0x7C, 0xBC, 0xB8, 0x08, 0x1A, 0x28, 0xFE, 0x79, 0xC4, 0x9F, 0x51, 0xF8, 0x04, 0x69, 0xF5, 0x0C, 0x50, 0x3F, 0xEA, 0x2D, 0xAA, 0xAA, 0x31, 0x5B, 0x98, 0x23, 0x84, 0x1E, 0x94, 0xEC, 0x6C, 0xED, 0x25, 0x07, 0x61, 0x0E, 0x7E, 0x2E, 0x63, 0x80, 0x6D, 0xA6, 0xF9, 0x43, 0x68, 0x6F, 0x9E, 0x13, 0xF8, 0x8A, 0x93, 0x33, 0x52, 0xB1, 0xD9, 0xA5, 0x41, 0x2A, 0x2C, 0x24, 0x3D, 0xF2, 0x15, 0x38, 0x89, 0x0D, 0x0A, 0x59, 0x27, 0x35, 0x0C, 0x86, 0x16, 0xAC, 0xA2, 0x49, 0x11, 0x76, 0x47, 0x19, 0x5D, 0x90, 0x3C, 0x3A, 0xFA, 0xFB, 0x81 },
            new byte [] { 0xAB, 0xE9, 0x74, 0xD4, 0x6E, 0xE5, 0x3D, 0x79, 0x3E, 0x32, 0x14, 0x6E, 0x5F, 0xCF, 0x7F, 0xB4, 0xD0, 0xBD, 0xF7, 0x4B, 0x50, 0xB9, 0xC0, 0xEE, 0x63, 0x06, 0x97, 0xE4, 0x84, 0xA3, 0x02, 0x2A, 0xF6, 0x92, 0x7A, 0x7D, 0x75, 0x8D, 0x44, 0x21, 0x45, 0xDA, 0x5E, 0x17, 0x66, 0x78, 0x85, 0x5C, 0xD7, 0x66, 0xFD, 0xAF, 0x9A, 0x62, 0xC7, 0x97, 0x6A, 0xAE, 0xE1, 0x8C, 0x8B, 0x4C, 0x09, 0x8E, 0xFC, 0x3B, 0x81, 0x26, 0x7B, 0x36, 0x4A, 0xC9, 0x8F, 0x82, 0x65, 0xBE, 0xB0, 0x20, 0x8C, 0x05, 0x22, 0x0F, 0x48, 0x58, 0xA0, 0x0B, 0x12, 0x40, 0x70, 0x57, 0xE7, 0x35, 0x91, 0xF4, 0x53, 0x37, 0x04, 0x9F, 0xCB }
        };

        private static byte[][] _map = new byte[][]
        {
            new byte[] { 0x00, 0x11, 0x07, 0x09, 0x06, 0x19, 0x01, 0x18, 0x30, 0x1A, 0x0B, 0x16, 0x08, 0x13, 0x15, 0x12, 0x1B, 0x2C, 0x17, 0x0A, 0x23, 0x2B, 0x21, 0x1D, 0x1E, 0x29, 0x03, 0x1C, 0x0C, 0x28, 0x26, 0x24, 0x27, 0x0D, 0x0E, 0x2E, 0x05, 0x2D, 0x22, 0x31, 0x1F, 0x2A, 0x02, 0x10, 0x04, 0x14, 0x0F, 0x2F, 0x20, 0x25 },
            new byte[] { 0x12, 0x20, 0x0F, 0x00, 0x07, 0x0D, 0x0E, 0x10, 0x30, 0x2B, 0x08, 0x21, 0x28, 0x16, 0x17, 0x29, 0x06, 0x2C, 0x1E, 0x31, 0x0A, 0x1D, 0x26, 0x18, 0x23, 0x1F, 0x2E, 0x05, 0x24, 0x03, 0x13, 0x22, 0x15, 0x1A, 0x0C, 0x01, 0x09, 0x25, 0x2D, 0x2A, 0x2F, 0x14, 0x27, 0x04, 0x0B, 0x11, 0x02, 0x19, 0x1C, 0x1B },
            new byte[] { 0x26, 0x18, 0x0C, 0x00, 0x27, 0x2F, 0x07, 0x10, 0x17, 0x08, 0x19, 0x1D, 0x0E, 0x1A, 0x0F, 0x2C, 0x2D, 0x25, 0x0B, 0x09, 0x15, 0x05, 0x1E, 0x2A, 0x21, 0x24, 0x14, 0x28, 0x29, 0x03, 0x06, 0x13, 0x01, 0x11, 0x16, 0x22, 0x23, 0x02, 0x1F, 0x30, 0x2E, 0x12, 0x31, 0x20, 0x0A, 0x2B, 0x04, 0x1B, 0x1C, 0x0D },
            new byte[] { 0x2D, 0x0A, 0x26, 0x05, 0x17, 0x11, 0x13, 0x21, 0x04, 0x2A, 0x1D, 0x18, 0x06, 0x12, 0x31, 0x1E, 0x24, 0x00, 0x19, 0x0E, 0x07, 0x1C, 0x22, 0x28, 0x10, 0x08, 0x20, 0x1F, 0x0B, 0x1B, 0x14, 0x15, 0x23, 0x01, 0x09, 0x2E, 0x1A, 0x29, 0x2C, 0x0F, 0x16, 0x2B, 0x02, 0x2F, 0x0C, 0x30, 0x0D, 0x25, 0x27, 0x03 },
            new byte[] { 0x1B, 0x04, 0x0A, 0x2B, 0x0C, 0x02, 0x16, 0x12, 0x17, 0x07, 0x1E, 0x11, 0x22, 0x01, 0x18, 0x1C, 0x2A, 0x0B, 0x21, 0x20, 0x23, 0x1F, 0x0F, 0x2C, 0x14, 0x28, 0x24, 0x19, 0x09, 0x2E, 0x10, 0x1A, 0x00, 0x0D, 0x29, 0x08, 0x06, 0x03, 0x26, 0x25, 0x15, 0x31, 0x27, 0x13, 0x1D, 0x2D, 0x2F, 0x0E, 0x30, 0x05 },
            new byte[] { 0x06, 0x17, 0x15, 0x28, 0x08, 0x12, 0x03, 0x1A, 0x27, 0x0E, 0x2B, 0x2F, 0x23, 0x16, 0x0A, 0x07, 0x20, 0x2D, 0x0F, 0x2C, 0x1F, 0x1D, 0x24, 0x10, 0x21, 0x00, 0x1C, 0x01, 0x29, 0x0B, 0x02, 0x18, 0x05, 0x26, 0x25, 0x04, 0x11, 0x19, 0x22, 0x2A, 0x2E, 0x13, 0x0C, 0x31, 0x1B, 0x30, 0x09, 0x1E, 0x14, 0x0D },
            new byte[] { 0x06, 0x25, 0x10, 0x17, 0x0B, 0x12, 0x27, 0x15, 0x28, 0x00, 0x21, 0x1B, 0x2A, 0x04, 0x0D, 0x24, 0x14, 0x30, 0x03, 0x19, 0x07, 0x29, 0x0E, 0x08, 0x0A, 0x0F, 0x2D, 0x26, 0x2B, 0x2C, 0x22, 0x0C, 0x02, 0x1D, 0x2F, 0x18, 0x1C, 0x2E, 0x05, 0x01, 0x1E, 0x16, 0x13, 0x1A, 0x23, 0x09, 0x20, 0x11, 0x31, 0x1F },
            new byte[] { 0x2A, 0x1B, 0x0F, 0x07, 0x21, 0x0E, 0x14, 0x13, 0x0C, 0x25, 0x11, 0x00, 0x0B, 0x19, 0x1D, 0x0A, 0x15, 0x08, 0x20, 0x05, 0x18, 0x1E, 0x04, 0x1C, 0x22, 0x12, 0x2D, 0x2B, 0x24, 0x09, 0x28, 0x29, 0x2C, 0x01, 0x17, 0x0D, 0x2F, 0x27, 0x03, 0x26, 0x16, 0x30, 0x1A, 0x23, 0x2E, 0x10, 0x31, 0x06, 0x1F, 0x02 },
            new byte[] { 0x1B, 0x0E, 0x0C, 0x09, 0x28, 0x01, 0x02, 0x04, 0x29, 0x17, 0x13, 0x21, 0x08, 0x16, 0x15, 0x18, 0x0A, 0x2F, 0x19, 0x1E, 0x24, 0x1D, 0x22, 0x2B, 0x06, 0x26, 0x05, 0x20, 0x23, 0x0B, 0x14, 0x12, 0x30, 0x2A, 0x07, 0x31, 0x1F, 0x0F, 0x10, 0x1A, 0x2D, 0x03, 0x25, 0x2C, 0x00, 0x0D, 0x1C, 0x2E, 0x27, 0x11 },
            new byte[] { 0x1D, 0x00, 0x0B, 0x04, 0x10, 0x12, 0x0D, 0x14, 0x19, 0x20, 0x2C, 0x01, 0x1E, 0x25, 0x07, 0x06, 0x09, 0x1A, 0x16, 0x03, 0x2A, 0x21, 0x23, 0x24, 0x1F, 0x0F, 0x02, 0x0E, 0x22, 0x13, 0x27, 0x2E, 0x2D, 0x29, 0x08, 0x15, 0x31, 0x0A, 0x11, 0x26, 0x2F, 0x1C, 0x28, 0x2B, 0x1B, 0x05, 0x17, 0x30, 0x18, 0x0C },
            new byte[] { 0x07, 0x18, 0x0A, 0x14, 0x06, 0x1C, 0x09, 0x10, 0x29, 0x26, 0x2B, 0x30, 0x2F, 0x23, 0x16, 0x08, 0x13, 0x20, 0x03, 0x1B, 0x2C, 0x1E, 0x24, 0x21, 0x22, 0x2E, 0x1D, 0x11, 0x27, 0x02, 0x05, 0x19, 0x04, 0x00, 0x25, 0x28, 0x12, 0x1A, 0x0E, 0x2A, 0x0F, 0x0B, 0x01, 0x31, 0x2D, 0x0D, 0x1F, 0x15, 0x0C, 0x17 },
            new byte[] { 0x06, 0x25, 0x10, 0x17, 0x0B, 0x12, 0x27, 0x15, 0x28, 0x00, 0x21, 0x1B, 0x2A, 0x04, 0x0D, 0x24, 0x14, 0x30, 0x03, 0x19, 0x07, 0x29, 0x0E, 0x08, 0x0A, 0x0F, 0x2D, 0x26, 0x2B, 0x2C, 0x22, 0x0C, 0x02, 0x1D, 0x2F, 0x18, 0x1C, 0x2E, 0x05, 0x01, 0x1E, 0x16, 0x13, 0x1A, 0x23, 0x09, 0x20, 0x11, 0x31, 0x1F },
            new byte[] { 0x2A, 0x1B, 0x0F, 0x07, 0x21, 0x0E, 0x14, 0x13, 0x0C, 0x25, 0x11, 0x00, 0x0B, 0x19, 0x1D, 0x0A, 0x15, 0x08, 0x20, 0x05, 0x18, 0x1E, 0x04, 0x1C, 0x22, 0x12, 0x2D, 0x2B, 0x24, 0x09, 0x28, 0x29, 0x2C, 0x01, 0x17, 0x0D, 0x2F, 0x27, 0x03, 0x26, 0x16, 0x30, 0x1A, 0x23, 0x2E, 0x10, 0x31, 0x06, 0x1F, 0x02 },
            new byte[] { 0x1B, 0x0E, 0x0C, 0x09, 0x28, 0x01, 0x02, 0x04, 0x29, 0x17, 0x13, 0x21, 0x08, 0x16, 0x15, 0x18, 0x0A, 0x2F, 0x19, 0x1E, 0x24, 0x1D, 0x22, 0x2B, 0x06, 0x26, 0x05, 0x20, 0x23, 0x0B, 0x14, 0x12, 0x30, 0x2A, 0x07, 0x31, 0x1F, 0x0F, 0x10, 0x1A, 0x2D, 0x03, 0x25, 0x2C, 0x00, 0x0D, 0x1C, 0x2E, 0x27, 0x11 },
            new byte[] { 0x1D, 0x00, 0x0B, 0x04, 0x10, 0x12, 0x0D, 0x14, 0x19, 0x20, 0x2C, 0x01, 0x1E, 0x25, 0x07, 0x06, 0x09, 0x1A, 0x16, 0x03, 0x2A, 0x21, 0x23, 0x24, 0x1F, 0x0F, 0x02, 0x0E, 0x22, 0x13, 0x27, 0x2E, 0x2D, 0x29, 0x08, 0x15, 0x31, 0x0A, 0x11, 0x26, 0x2F, 0x1C, 0x28, 0x2B, 0x1B, 0x05, 0x17, 0x30, 0x18, 0x0C },
            new byte[] { 0x07, 0x18, 0x0A, 0x14, 0x06, 0x1C, 0x09, 0x10, 0x29, 0x26, 0x2B, 0x30, 0x2F, 0x23, 0x16, 0x08, 0x13, 0x20, 0x03, 0x1B, 0x2C, 0x1E, 0x24, 0x21, 0x22, 0x2E, 0x1D, 0x11, 0x27, 0x02, 0x05, 0x19, 0x04, 0x00, 0x25, 0x28, 0x12, 0x1A, 0x0E, 0x2A, 0x0F, 0x0B, 0x01, 0x31, 0x2D, 0x0D, 0x1F, 0x15, 0x0C, 0x17 }
        };

        public static bool DecryptLevel(string source, string target)
        {
            if (!File.Exists(source)) return false;
            if (File.Exists(target)) File.Delete(target);
            File.Copy(source, target);

            bool result = false;

            var iStream = new FileStream(source, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
            var oStream = new FileStream(target, FileMode.Open, FileAccess.Write, FileShare.Read);
            var sr = new BinaryReaderEx(iStream);
            var sw = new BinaryWriterEx(oStream);

            try
            {
                sw.Seek(3, SeekOrigin.Begin);
                sw.Write((byte)0);

                sr.BaseStream.Seek(14, SeekOrigin.Begin);
                sw.BaseStream.Seek(14, SeekOrigin.Begin);

                uint size;
                byte[] header = new byte[_keyLength];

                int chunk;
                for (chunk = 0; chunk < 4; ++chunk)
                {
                    size = sr.ReadUInt32();
                    sr.ReadBlockArray(out header, _keyLength);
                    sw.Seek(4, SeekOrigin.Current);
                    sw.WriteBlockArray(Decrypt(header, (int)size >> (chunk + 5) & 0x0F, (int)size >> (chunk + 1) & 0x0F));
                    sw.BaseStream.Seek(size - _keyLength + sizeof(uint), SeekOrigin.Current);
                    sr.BaseStream.Seek(size - _keyLength + sizeof(uint), SeekOrigin.Current);
                }

                result = true;
            }
            finally
            {
                sw.Close();
                sr.Close();
                oStream.Close();
                iStream.Close();
            }

            return result;
        }

        private static byte[] Decrypt(byte[] buffer, int map_index, int key_index)
        {
            var mapLength = _map[map_index].Length;
            var keyLength = _key[key_index].Length;
            byte[] temp = new byte[mapLength];

            for (int i = 0; i < mapLength; ++i)
                temp[_map[map_index][i]] = buffer[i];
            for (int i = 0; i < mapLength; ++i)
                buffer[i] = (byte)(temp[i] ^ _key[key_index][i]);
            for (int i = mapLength; i < keyLength; ++i)
                buffer[i] ^= _key[key_index][i];

            return buffer;
        }
    }
}
