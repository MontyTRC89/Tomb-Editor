//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TombLib.Scripting.Resources.ToolTips {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class CommandToolTips {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal CommandToolTips() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("TombLib.Scripting.Resources.ToolTips.CommandToolTips", typeof(CommandToolTips).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When the game displays ANIMATING[1-16] objects,
        ///it will display the corresponding ANIMATING[1-16]_MIP object when Lara (actually her chase camera)
        ///is at a certain distance away from them.
        ///
        ///The MIP objects are low-resolution polygon models that will use fewer resources.
        ///Distance works by blocks, so a value of 1 shows the MIP until Lara is about 1 block away.
        ///When she gets within that range, the MIP swaps with the actual object.
        ///A value of 2 makes it 2 blocks, 3 makes it 3 blocks and so forth.
        ///
        ///Usage [rest of string was truncated]&quot;;.
        /// </summary>
        public static string AnimatingMIP {
            get {
                return ResourceManager.GetString("AnimatingMIP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enables / Disables additive blending to semi-transparent textures assigned to the HORIZON object.
        ///Remember, textures above the sky-sprite need to be assigned as Semi-Transparent, or the sky-sprite will not be visible.
        ///
        ///Usage:
        ///ColAddHorizon = ENABLED / DISABLED.
        /// </summary>
        public static string ColAddHorizon {
            get {
                return ResourceManager.GetString("ColAddHorizon", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies that the SCRIPT.txt file is for a demo,
        ///therefore the resulting SCRIPT.dat file will only have a title level and one playable level specified (the first one defined)
        ///regardless of how many playable levels are defined in the SCRIPT.txt file.
        ///
        ///Usage:
        ///DemoDisc = ENABLED / DISABLED.
        /// </summary>
        public static string DemoDisc {
            get {
                return ResourceManager.GetString("DemoDisc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Information about the EXAMINE[1-3] collectible items.
        ///
        ///The first parameter is the number of the EXAMINE object in the wad file.
        ///The second parameter is its name displayed in the inventory and must be identical to a string in the ENGLISH.txt file.
        ///
        ///The {HEIGHT} parameter adjusts the height of the object viewed in the inventory.
        ///It calculates the position of the center of the rotation from the top of the screen, converted in hexadecimal value.
        ///The larger the number, the lower the object.
        ///You can also  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string Examine {
            get {
                return ResourceManager.GetString("Examine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enables / Disables the DOZY cheat.
        ///
        ///Usage:
        ///FlyCheat = ENABLED / DISABLED.
        /// </summary>
        public static string FlyCheat {
            get {
                return ResourceManager.GetString("FlyCheat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set distance fog color for the current level.
        ///Distance Fog is visible only if VOLUMETRIC FX are disabled in the setup
        ///or if the level is set in TRAIN mode (in which Volumetric Effects are disabled by default).
        ///
        ///Usage:
        ///Fog = {RED_VALUE}, {GREEN_VALUE}, {BLUE_VALUE}.
        /// </summary>
        public static string Fog {
            get {
                return ResourceManager.GetString("Fog", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enables / Disables the Skybox.
        ///The game will display the HORIZON object in every room where the Skybox is set as visible.
        ///
        ///Usage:
        ///Horizon = ENABLED / DISABLED.
        /// </summary>
        public static string Horizon {
            get {
                return ResourceManager.GetString("Horizon", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the number of tick frames after which the game enters demo mode if the player doesn’t press any key.
        ///
        ///Usage:
        ///InputTimeout = {NUM_OF_FRAMES}.
        /// </summary>
        public static string InputTimeout {
            get {
                return ResourceManager.GetString("InputTimeout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Information about the KEY[1-12] collectible items.
        ///
        ///The first parameter is the number of the KEY object in the wad file.
        ///The second parameter is its name displayed in the inventory and must be identical to a string in the ENGLISH.txt file.
        ///
        ///The {HEIGHT} parameter adjusts the height of the object viewed in the inventory.
        ///It calculates the position of the center of the rotation from the top of the screen, converted in hexadecimal value.
        ///The larger the number, the lower the object.
        ///You can also use neg [rest of string was truncated]&quot;;.
        /// </summary>
        public static string Key {
            get {
                return ResourceManager.GetString("Key", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Information about the KEY[1-8]_COMBO[1-2] collectible items.
        ///
        ///The first parameter is the number of the KEY object in the wad file.
        ///The second parameter is the COMBO part of the KEY object in the wad file.
        ///The third parameter is its name displayed in the inventory and must be identical to a string in the ENGLISH.txt file.
        ///
        ///The {HEIGHT} parameter adjusts the height of the object viewed in the inventory.
        ///It calculates the position of the center of the rotation from the top of the screen, converted in he [rest of string was truncated]&quot;;.
        /// </summary>
        public static string KeyCombo {
            get {
                return ResourceManager.GetString("KeyCombo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sets the color and speed of the scrolling sky texture.
        ///Accepted values of speed are in a range between -16 and 16.
        ///
        ///Layer1 = {RED_VALUE}, {GREEN_VALUE}, {BLUE_VALUE}, {SPEED}.
        /// </summary>
        public static string Layer1 {
            get {
                return ResourceManager.GetString("Layer1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Displays a string of text on the bottom of the screen at the start of the level.
        ///The string must be identical to a string in the ENGLISH.txt file.
        ///
        ///Usage:
        ///Legend = {MESSAGE_STRING}.
        /// </summary>
        public static string Legend {
            get {
                return ResourceManager.GetString("Legend", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enables a global Lens Flare in the level.
        ///The Lens Flare can be seen anywhere inside the level as long as it’s in a visible patch of sky.
        ///The origin of the Lens Flare is set in global level coordinates.
        ///Enable FlyCheat mode and press F1 to display global coordinates in game.
        ///
        ///Usage:
        ///LensFlare = {GLOBAL_COORD_X}, {GLOBAL_COORD_Y}, {GLOBAL_COORD_Z}, {RED_VALUE}, {GREEN_VALUE}, {BLUE_VALUE}.
        /// </summary>
        public static string LensFlare {
            get {
                return ResourceManager.GetString("LensFlare", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Defines the .TR4 level path and the ambient sound used at the start of the level.
        ///Level files are mainly stored in the game&apos;s &quot;DATA&quot; folder.
        ///
        ///Usage:
        ///Level = {LEVEL_PATH}, {SOUND_ID}.
        /// </summary>
        public static string LevelLevel {
            get {
                return ResourceManager.GetString("LevelLevel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File extension for PC level files.
        ///
        ///Usage:
        ///Level = .TR4.
        /// </summary>
        public static string LevelPC {
            get {
                return ResourceManager.GetString("LevelPC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File extension for PSX level files.
        ///
        ///Usage:
        ///Level = .PSX.
        /// </summary>
        public static string LevelPSX {
            get {
                return ResourceManager.GetString("LevelPSX", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Defines the title screen .TR4 level path and the ambient sound used at the start of the level.
        ///Level files are mainly stored in the game&apos;s &quot;DATA&quot; folder.
        ///
        ///Usage:
        ///Level = {LEVEL_PATH}, {SOUND_ID}.
        /// </summary>
        public static string LevelTitle {
            get {
                return ResourceManager.GetString("LevelTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enables / Disables thunderstorm.
        ///The background audio will include thunder sounds and the sky texture will flash to simulate lightning.
        ///
        ///Usage:
        ///Lightning = ENABLED / DISABLED.
        /// </summary>
        public static string Lightning {
            get {
                return ResourceManager.GetString("Lightning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sets the framing to display during the ‘Load Game’ screen in game.
        ///The position of the camera and the target are set in global level coordinates.
        ///Enable FlyCheat mode and press F1 to display global coordinates in game.
        ///
        ///Usage:
        ///LoadCamera = {SOURCE_X_POS}, {SOURCE_Y_POS}, {SOURCE_Z_POS}, {TARGET_X_POS}, {TARGET_Y_POS}, {TARGET_Z_POS}, {ROOM_NUMBER}.
        /// </summary>
        public static string LoadCamera {
            get {
                return ResourceManager.GetString("LoadCamera", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enables / Disables loading and saving the game.
        ///
        ///Usage:
        ///LoadSave = ENABLED / DISABLED.
        /// </summary>
        public static string LoadSave {
            get {
                return ResourceManager.GetString("LoadSave", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enables a mirror effect.
        ///
        ///Usage:
        ///Mirror = {ROOM_NUMBER}, {ROOM_ORIGIN}.
        /// </summary>
        public static string Mirror {
            get {
                return ResourceManager.GetString("Mirror", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The string of text displayed on the &quot;Select Level&quot;, &quot;Load Game&quot; and &quot;Save Game&quot; screens for the level.
        ///The string must be identical to a string in the english.txt file.
        ///
        ///Usage:
        ///Name = {NAME_STRING}.
        /// </summary>
        public static string Name {
            get {
                return ResourceManager.GetString("Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Information about the PICKUP[1-4] collectible items.
        ///
        ///The first parameter is the number of the PICKUP object in the wad file.
        ///The second parameter is its name displayed in the inventory and must be identical to a string in the ENGLISH.txt file.
        ///
        ///The {HEIGHT} parameter adjusts the height of the object viewed in the inventory.
        ///It calculates the position of the center of the rotation from the top of the screen, converted in hexadecimal value.
        ///The larger the number, the lower the object.
        ///You can also us [rest of string was truncated]&quot;;.
        /// </summary>
        public static string Pickup {
            get {
                return ResourceManager.GetString("Pickup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Information about the PICKUP[1-4]_COMBO[1-2] collectible items.
        ///
        ///The first parameter is the number of the PICKUP object in the wad file.
        ///The second parameter is the COMBO part of the PICKUP object in the wad file.
        ///The third parameter is its name displayed in the inventory and must be identical to a string in the ENGLISH.txt file.
        ///
        ///The {HEIGHT} parameter adjusts the height of the object viewed in the inventory.
        ///It calculates the position of the center of the rotation from the top of the screen, conver [rest of string was truncated]&quot;;.
        /// </summary>
        public static string PickupCombo {
            get {
                return ResourceManager.GetString("PickupCombo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enables / Disables the player to select any level after entering the &quot;New Game&quot; menu.
        ///If disabled, the game won&apos;t open the &quot;New Game&quot; menu, but will directly open the first defined level instead.
        ///
        ///Usage:
        ///PlayAnyLevel = ENABLED / DISABLED.
        /// </summary>
        public static string PlayAnyLevel {
            get {
                return ResourceManager.GetString("PlayAnyLevel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Information about the PUZZLE[1-12] collectible items.
        ///
        ///The first parameter is the number of the PUZZLE object in the wad file.
        ///The second parameter is its name displayed in the inventory and must be identical to a string in the ENGLISH.txt file.
        ///
        ///The {HEIGHT} parameter adjusts the height of the object viewed in the inventory.
        ///It calculates the position of the center of the rotation from the top of the screen, converted in hexadecimal value.
        ///The larger the number, the lower the object.
        ///You can also u [rest of string was truncated]&quot;;.
        /// </summary>
        public static string Puzzle {
            get {
                return ResourceManager.GetString("Puzzle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Information about the PUZZLE[1-8]_COMBO[1-2] collectible items.
        ///
        ///The first parameter is the number of the PUZZLE object in the wad file.
        ///The second parameter is the COMBO part of the PUZZLE object in the wad file.
        ///The third parameter is its name displayed in the inventory and must be identical to a string in the ENGLISH.txt file.
        ///
        ///The {HEIGHT} parameter adjusts the height of the object viewed in the inventory.
        ///It calculates the position of the center of the rotation from the top of the screen, conver [rest of string was truncated]&quot;;.
        /// </summary>
        public static string PuzzleCombo {
            get {
                return ResourceManager.GetString("PuzzleCombo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Removes QUEST_ITEM1 from Lara’s inventory at the start of the level.
        ///
        ///Usage:
        ///RemoveAmulet = ENABLED / DISABLED.
        /// </summary>
        public static string RemoveAmulet {
            get {
                return ResourceManager.GetString("RemoveAmulet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Resets the game memory (including FlipEffect info),
        ///removes any information on carried items (puzzles, keys and pickups only),
        ///and reinitialize Lara.
        ///
        ///Useful to free memory space and required if you change the LARA_SKIN object.
        ///Must be used in the level BEFORE the call for the reset
        ///and the parameter must point to the level ID number to be loaded after the reset.
        ///
        ///Usage:
        ///ResetHUB = {LEVEL_ID}.
        /// </summary>
        public static string ResetHUB {
            get {
                return ResourceManager.GetString("ResetHUB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Displays an in game cut-scene somewhere in the middle of the level.
        ///Used together with the Cutscene trigger.
        ///The first parameter is the index of the cutscene called by the trigger.
        ///The second parameter is the ID of the cut-scene in the cutseq.pak that will be used.
        ///The executable distributed with the official Level Editor can display these types of cut-scenes
        ///but currently there are no ways to create new ones.
        ///
        ///Usage:
        ///ResidentCut = {TRIGGER_ID}, {CUTSCENE_ID}.
        /// </summary>
        public static string ResidentCut {
            get {
                return ResourceManager.GetString("ResidentCut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Shows a timer on the top of the screen, indicating the amount of time spent in the level.
        ///Only works in the second level of the game.
        ///
        ///Usage:
        ///Timer = ENABLED / DISABLED.
        /// </summary>
        public static string Timer {
            get {
                return ResourceManager.GetString("Timer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies if a [Title] section exists.
        ///
        ///Usage:
        ///Title = ENABLED / DISABLED.
        /// </summary>
        public static string Title {
            get {
                return ResourceManager.GetString("Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enables / Disables the Train level mode.
        ///
        ///Usage:
        ///Train = ENABLED / DISABLED.
        /// </summary>
        public static string Train {
            get {
                return ResourceManager.GetString("Train", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Animates the first textures of your texture set with a scrolling animation.
        ///The parameter sets the speed of the scrolling animation.
        ///Accepted values of speed are in a range between -16 and 16.
        ///
        ///Usage:
        ///UVrotate = {SPEED}.
        /// </summary>
        public static string UVRotate {
            get {
                return ResourceManager.GetString("UVRotate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It will disable all weapons, and the holsters will not appear.
        ///Also, Lara’s ponytail will appear as two pigtails instead.
        ///
        ///Usage:
        ///YoungLara = ENABLED / DISABLED.
        /// </summary>
        public static string YoungLara {
            get {
                return ResourceManager.GetString("YoungLara", resourceCulture);
            }
        }
    }
}
